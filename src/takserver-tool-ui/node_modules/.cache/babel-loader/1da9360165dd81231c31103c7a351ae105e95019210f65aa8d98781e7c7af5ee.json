{"ast":null,"code":"import { gridVisibleColumnDefinitionsSelector } from '../features/columns/gridColumnsSelector';\nimport { useGridSelector } from './useGridSelector';\nimport { useGridRootProps } from './useGridRootProps';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../features/columnGrouping/gridColumnGroupsSelector';\nimport { gridPinnedRowsCountSelector, gridRowCountSelector } from '../features/rows/gridRowsSelector';\nimport { useGridPrivateApiContext } from './useGridPrivateApiContext';\nexport var useGridAriaAttributes = function useGridAriaAttributes() {\n  var _rootProps$experiment;\n  var apiRef = useGridPrivateApiContext();\n  var rootProps = useGridRootProps();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  var headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  var pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);\n  var role = 'grid';\n  if ((_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.ariaV7 && rootProps.treeData) {\n    role = 'treegrid';\n  }\n  return {\n    role: role,\n    'aria-colcount': visibleColumns.length,\n    'aria-rowcount': headerGroupingMaxDepth + 1 + pinnedRowsCount + totalRowCount,\n    'aria-multiselectable': !rootProps.disableMultipleRowSelection\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}