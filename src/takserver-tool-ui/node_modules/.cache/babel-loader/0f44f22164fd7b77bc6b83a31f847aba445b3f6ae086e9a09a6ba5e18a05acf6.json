{"ast":null,"code":"import _regeneratorRuntime from \"/home/radu/Server/src/takserver-tool-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/radu/Server/src/takserver-tool-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/radu/Server/src/takserver-tool-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"hasFocus\", \"isValidating\", \"debounceMs\", \"isProcessingProps\", \"onValueChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { styled } from '@mui/material/styles';\nimport InputBase from '@mui/material/InputBase';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['editInputCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nvar GridEditInputCellRoot = styled(InputBase, {\n  name: 'MuiDataGrid',\n  slot: 'EditInputCell',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.editInputCell;\n  }\n})(function (_ref) {\n  var theme = _ref.theme;\n  return _extends({}, theme.typography.body2, {\n    padding: '1px 0',\n    '& input': {\n      padding: '0 16px',\n      height: '100%'\n    }\n  });\n});\nvar GridEditInputCell = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _ref2;\n  var rootProps = useGridRootProps();\n  var id = props.id,\n    value = props.value,\n    field = props.field,\n    colDef = props.colDef,\n    hasFocus = props.hasFocus,\n    _props$debounceMs = props.debounceMs,\n    debounceMs = _props$debounceMs === void 0 ? 200 : _props$debounceMs,\n    isProcessingProps = props.isProcessingProps,\n    onValueChange = props.onValueChange,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var apiRef = useGridApiContext();\n  var inputRef = React.useRef();\n  var _React$useState = React.useState(value),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    valueState = _React$useState2[0],\n    setValueState = _React$useState2[1];\n  var classes = useUtilityClasses(rootProps);\n  var handleChange = React.useCallback(function (_x) {\n    return (_ref2 = _ref2 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n      var newValue, column, parsedValue;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            newValue = event.target.value;\n            if (!onValueChange) {\n              _context.next = 4;\n              break;\n            }\n            _context.next = 4;\n            return onValueChange(event, newValue);\n          case 4:\n            column = apiRef.current.getColumn(field);\n            parsedValue = newValue;\n            if (column.valueParser) {\n              parsedValue = column.valueParser(newValue, apiRef.current.getCellParams(id, field));\n            }\n            setValueState(parsedValue);\n            apiRef.current.setEditCellValue({\n              id: id,\n              field: field,\n              value: parsedValue,\n              debounceMs: debounceMs,\n              unstable_skipValueParser: true\n            }, event);\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))).apply(this, arguments);\n  }, [apiRef, debounceMs, field, id, onValueChange]);\n  var meta = apiRef.current.unstable_getEditCellMeta(id, field);\n  React.useEffect(function () {\n    if ((meta == null ? void 0 : meta.changeReason) !== 'debouncedSetEditCellValue') {\n      setValueState(value);\n    }\n  }, [meta, value]);\n  useEnhancedEffect(function () {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(GridEditInputCellRoot, _extends({\n    ref: ref,\n    inputRef: inputRef,\n    className: classes.root,\n    ownerState: rootProps,\n    fullWidth: true,\n    type: colDef.type === 'number' ? colDef.type : 'text',\n    value: valueState != null ? valueState : '',\n    onChange: handleChange,\n    endAdornment: isProcessingProps ? /*#__PURE__*/_jsx(rootProps.slots.loadIcon, {\n      fontSize: \"small\",\n      color: \"action\"\n    }) : undefined\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridEditInputCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  debounceMs: PropTypes.number,\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditInputCell };\nexport var renderEditInputCell = function renderEditInputCell(params) {\n  return /*#__PURE__*/_jsx(GridEditInputCell, _extends({}, params));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}