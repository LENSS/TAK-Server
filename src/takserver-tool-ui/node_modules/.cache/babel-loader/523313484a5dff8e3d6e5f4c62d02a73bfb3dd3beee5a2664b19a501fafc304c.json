{"ast":null,"code":"import { GridFilterInputValue } from '../components/panel/filterPanel/GridFilterInputValue';\nimport { GridFilterInputMultipleValue } from '../components/panel/filterPanel/GridFilterInputMultipleValue';\nimport { convertLegacyOperators, tagInternalFilter } from './utils';\nvar parseNumericValue = function parseNumericValue(value) {\n  if (value == null) {\n    return null;\n  }\n  return Number(value);\n};\nexport var getGridNumericQuickFilterFn = tagInternalFilter(function (value) {\n  if (value == null || Number.isNaN(value) || value === '') {\n    return null;\n  }\n  return function (columnValue) {\n    return parseNumericValue(columnValue) === parseNumericValue(value);\n  };\n});\nexport var getGridNumericOperators = function getGridNumericOperators() {\n  return convertLegacyOperators([{\n    value: '=',\n    getApplyFilterFnV7: function getApplyFilterFnV7(filterItem) {\n      if (filterItem.value == null || Number.isNaN(filterItem.value)) {\n        return null;\n      }\n      return function (value) {\n        return parseNumericValue(value) === filterItem.value;\n      };\n    },\n    InputComponent: GridFilterInputValue,\n    InputComponentProps: {\n      type: 'number'\n    }\n  }, {\n    value: '!=',\n    getApplyFilterFnV7: function getApplyFilterFnV7(filterItem) {\n      if (filterItem.value == null || Number.isNaN(filterItem.value)) {\n        return null;\n      }\n      return function (value) {\n        return parseNumericValue(value) !== filterItem.value;\n      };\n    },\n    InputComponent: GridFilterInputValue,\n    InputComponentProps: {\n      type: 'number'\n    }\n  }, {\n    value: '>',\n    getApplyFilterFnV7: function getApplyFilterFnV7(filterItem) {\n      if (filterItem.value == null || Number.isNaN(filterItem.value)) {\n        return null;\n      }\n      return function (value) {\n        if (value == null) {\n          return false;\n        }\n        return parseNumericValue(value) > filterItem.value;\n      };\n    },\n    InputComponent: GridFilterInputValue,\n    InputComponentProps: {\n      type: 'number'\n    }\n  }, {\n    value: '>=',\n    getApplyFilterFnV7: function getApplyFilterFnV7(filterItem) {\n      if (filterItem.value == null || Number.isNaN(filterItem.value)) {\n        return null;\n      }\n      return function (value) {\n        if (value == null) {\n          return false;\n        }\n        return parseNumericValue(value) >= filterItem.value;\n      };\n    },\n    InputComponent: GridFilterInputValue,\n    InputComponentProps: {\n      type: 'number'\n    }\n  }, {\n    value: '<',\n    getApplyFilterFnV7: function getApplyFilterFnV7(filterItem) {\n      if (filterItem.value == null || Number.isNaN(filterItem.value)) {\n        return null;\n      }\n      return function (value) {\n        if (value == null) {\n          return false;\n        }\n        return parseNumericValue(value) < filterItem.value;\n      };\n    },\n    InputComponent: GridFilterInputValue,\n    InputComponentProps: {\n      type: 'number'\n    }\n  }, {\n    value: '<=',\n    getApplyFilterFnV7: function getApplyFilterFnV7(filterItem) {\n      if (filterItem.value == null || Number.isNaN(filterItem.value)) {\n        return null;\n      }\n      return function (value) {\n        if (value == null) {\n          return false;\n        }\n        return parseNumericValue(value) <= filterItem.value;\n      };\n    },\n    InputComponent: GridFilterInputValue,\n    InputComponentProps: {\n      type: 'number'\n    }\n  }, {\n    value: 'isEmpty',\n    getApplyFilterFnV7: function getApplyFilterFnV7() {\n      return function (value) {\n        return value == null;\n      };\n    },\n    requiresFilterValue: false\n  }, {\n    value: 'isNotEmpty',\n    getApplyFilterFnV7: function getApplyFilterFnV7() {\n      return function (value) {\n        return value != null;\n      };\n    },\n    requiresFilterValue: false\n  }, {\n    value: 'isAnyOf',\n    getApplyFilterFnV7: function getApplyFilterFnV7(filterItem) {\n      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n        return null;\n      }\n      return function (value) {\n        return value != null && filterItem.value.includes(Number(value));\n      };\n    },\n    InputComponent: GridFilterInputMultipleValue,\n    InputComponentProps: {\n      type: 'number'\n    }\n  }]);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}