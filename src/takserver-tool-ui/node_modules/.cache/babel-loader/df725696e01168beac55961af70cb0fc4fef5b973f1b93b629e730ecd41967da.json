{"ast":null,"code":"import _regeneratorRuntime from \"/home/radu/Server/src/takserver-tool-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/radu/Server/src/takserver-tool-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/radu/Server/src/takserver-tool-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"hasFocus\", \"inputProps\", \"isValidating\", \"isProcessingProps\", \"onValueChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport InputBase from '@mui/material/InputBase';\nimport { styled } from '@mui/material/styles';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar StyledInputBase = styled(InputBase)({\n  fontSize: 'inherit'\n});\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['editInputCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridEditDateCell(props) {\n  var _ref;\n  var id = props.id,\n    valueProp = props.value,\n    field = props.field,\n    colDef = props.colDef,\n    hasFocus = props.hasFocus,\n    inputProps = props.inputProps,\n    onValueChange = props.onValueChange,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var isDateTime = colDef.type === 'dateTime';\n  var apiRef = useGridApiContext();\n  var inputRef = React.useRef();\n  var valueTransformed = React.useMemo(function () {\n    var parsedDate;\n    if (valueProp == null) {\n      parsedDate = null;\n    } else if (valueProp instanceof Date) {\n      parsedDate = valueProp;\n    } else {\n      parsedDate = new Date((valueProp != null ? valueProp : '').toString());\n    }\n    var formattedDate;\n    if (parsedDate == null || Number.isNaN(parsedDate.getTime())) {\n      formattedDate = '';\n    } else {\n      var localDate = new Date(parsedDate.getTime() - parsedDate.getTimezoneOffset() * 60 * 1000);\n      formattedDate = localDate.toISOString().substr(0, isDateTime ? 16 : 10);\n    }\n    return {\n      parsed: parsedDate,\n      formatted: formattedDate\n    };\n  }, [valueProp, isDateTime]);\n  var _React$useState = React.useState(valueTransformed),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    valueState = _React$useState2[0],\n    setValueState = _React$useState2[1];\n  var rootProps = useGridRootProps();\n  var ownerState = {\n    classes: rootProps.classes\n  };\n  var classes = useUtilityClasses(ownerState);\n  var hasUpdatedEditValueOnMount = React.useRef(false);\n  var parseValueToDate = React.useCallback(function (value) {\n    if (value === '') {\n      return null;\n    }\n    var _value$split = value.split('T'),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      date = _value$split2[0],\n      time = _value$split2[1];\n    var _date$split = date.split('-'),\n      _date$split2 = _slicedToArray(_date$split, 3),\n      year = _date$split2[0],\n      month = _date$split2[1],\n      day = _date$split2[2];\n    var parsedDate = new Date();\n    parsedDate.setFullYear(Number(year), Number(month) - 1, Number(day));\n    parsedDate.setHours(0, 0, 0, 0);\n    if (time) {\n      var _time$split = time.split(':'),\n        _time$split2 = _slicedToArray(_time$split, 2),\n        hours = _time$split2[0],\n        minutes = _time$split2[1];\n      parsedDate.setHours(Number(hours), Number(minutes), 0, 0);\n    }\n    return parsedDate;\n  }, []);\n  var handleChange = React.useCallback(function (_x) {\n    return (_ref = _ref || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n      var newFormattedDate, newParsedDate;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            newFormattedDate = event.target.value;\n            newParsedDate = parseValueToDate(newFormattedDate);\n            if (!onValueChange) {\n              _context.next = 5;\n              break;\n            }\n            _context.next = 5;\n            return onValueChange(event, newParsedDate);\n          case 5:\n            setValueState({\n              parsed: newParsedDate,\n              formatted: newFormattedDate\n            });\n            apiRef.current.setEditCellValue({\n              id: id,\n              field: field,\n              value: newParsedDate\n            }, event);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))).apply(this, arguments);\n  }, [apiRef, field, id, onValueChange, parseValueToDate]);\n  React.useEffect(function () {\n    setValueState(function (state) {\n      var _valueTransformed$par, _state$parsed;\n      if (valueTransformed.parsed !== state.parsed && ((_valueTransformed$par = valueTransformed.parsed) == null ? void 0 : _valueTransformed$par.getTime()) !== ((_state$parsed = state.parsed) == null ? void 0 : _state$parsed.getTime())) {\n        return valueTransformed;\n      }\n      return state;\n    });\n  }, [valueTransformed]);\n  useEnhancedEffect(function () {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  var meta = apiRef.current.unstable_getEditCellMeta(id, field);\n  var handleInputRef = function handleInputRef(el) {\n    inputRef.current = el;\n    if (meta != null && meta.unstable_updateValueOnRender && !hasUpdatedEditValueOnMount.current) {\n      var inputValue = inputRef.current.value;\n      var parsedDate = parseValueToDate(inputValue);\n      setValueState({\n        parsed: parsedDate,\n        formatted: inputValue\n      });\n      apiRef.current.setEditCellValue({\n        id: id,\n        field: field,\n        value: parsedDate\n      });\n      hasUpdatedEditValueOnMount.current = true;\n    }\n  };\n  return /*#__PURE__*/_jsx(StyledInputBase, _extends({\n    inputRef: handleInputRef,\n    fullWidth: true,\n    className: classes.root,\n    type: isDateTime ? 'datetime-local' : 'date',\n    inputProps: _extends({\n      max: isDateTime ? '9999-12-31T23:59' : '9999-12-31'\n    }, inputProps),\n    value: valueState.formatted,\n    onChange: handleChange\n  }, other));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridEditDateCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditDateCell };\nexport var renderEditDateCell = function renderEditDateCell(params) {\n  return /*#__PURE__*/_jsx(GridEditDateCell, _extends({}, params));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}