{"ast":null,"code":"import _defineProperty from \"/home/radu/Server/src/takserver-tool-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as React from 'react';\nimport { Store } from '../../utils/Store';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nvar SYMBOL_API_PRIVATE = Symbol('mui.api_private');\nvar isSyntheticEvent = function isSyntheticEvent(event) {\n  return event.isPropagationStopped !== undefined;\n};\nexport function unwrapPrivateAPI(publicApi) {\n  return publicApi[SYMBOL_API_PRIVATE];\n}\nvar globalId = 0;\nfunction createPrivateAPI(publicApiRef) {\n  var _publicApiRef$current;\n  var existingPrivateApi = (_publicApiRef$current = publicApiRef.current) == null ? void 0 : _publicApiRef$current[SYMBOL_API_PRIVATE];\n  if (existingPrivateApi) {\n    return existingPrivateApi;\n  }\n  var state = {};\n  var privateApi = {\n    state: state,\n    store: Store.create(state),\n    instanceId: {\n      id: globalId\n    }\n  };\n  globalId += 1;\n  privateApi.getPublicApi = function () {\n    return publicApiRef.current;\n  };\n  privateApi.register = function (visibility, methods) {\n    Object.keys(methods).forEach(function (methodName) {\n      var method = methods[methodName];\n      var currentPrivateMethod = privateApi[methodName];\n      if ((currentPrivateMethod == null ? void 0 : currentPrivateMethod.spying) === true) {\n        currentPrivateMethod.target = method;\n      } else {\n        privateApi[methodName] = method;\n      }\n      if (visibility === 'public') {\n        var publicApi = publicApiRef.current;\n        var currentPublicMethod = publicApi[methodName];\n        if ((currentPublicMethod == null ? void 0 : currentPublicMethod.spying) === true) {\n          currentPublicMethod.target = method;\n        } else {\n          publicApi[methodName] = method;\n        }\n      }\n    });\n  };\n  privateApi.register('private', {\n    caches: {},\n    eventManager: new EventManager()\n  });\n  return privateApi;\n}\nfunction createPublicAPI(privateApiRef) {\n  var publicApi = _defineProperty({\n    get state() {\n      return privateApiRef.current.state;\n    },\n    get store() {\n      return privateApiRef.current.store;\n    },\n    get instanceId() {\n      return privateApiRef.current.instanceId;\n    }\n  }, SYMBOL_API_PRIVATE, privateApiRef.current);\n  return publicApi;\n}\nexport function useGridApiInitialization(inputApiRef, props) {\n  var publicApiRef = React.useRef();\n  var privateApiRef = React.useRef();\n  if (!privateApiRef.current) {\n    privateApiRef.current = createPrivateAPI(publicApiRef);\n  }\n  if (!publicApiRef.current) {\n    publicApiRef.current = createPublicAPI(privateApiRef);\n  }\n  var publishEvent = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var name = args[0],\n      params = args[1],\n      _args$ = args[2],\n      event = _args$ === void 0 ? {} : _args$;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    var details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  var subscribeEvent = React.useCallback(function (event, handler, options) {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    var api = privateApiRef.current;\n    return function () {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent: subscribeEvent,\n    publishEvent: publishEvent\n  }, 'public');\n  React.useImperativeHandle(inputApiRef, function () {\n    return publicApiRef.current;\n  }, [publicApiRef]);\n  React.useEffect(function () {\n    var api = privateApiRef.current;\n    return function () {\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}