[{"/home/radu/Server/src/takserver-tool-ui/src/index.js":"1","/home/radu/Server/src/takserver-tool-ui/src/MissionManager.js":"2","/home/radu/Server/src/takserver-tool-ui/src/MenuBar.js":"3","/home/radu/Server/src/takserver-tool-ui/src/FileManager.js":"4","/home/radu/Server/src/takserver-tool-ui/src/SendInviteMission.js":"5","/home/radu/Server/src/takserver-tool-ui/src/UploadFile.js":"6","/home/radu/Server/src/takserver-tool-ui/src/Footer.js":"7","/home/radu/Server/src/takserver-tool-ui/src/TranferList.js":"8"},{"size":977,"mtime":1742351549518,"results":"9","hashOfConfig":"10"},{"size":53104,"mtime":1742351549517,"results":"11","hashOfConfig":"10"},{"size":2304,"mtime":1742351549517,"results":"12","hashOfConfig":"10"},{"size":24296,"mtime":1742351549517,"results":"13","hashOfConfig":"10"},{"size":4097,"mtime":1742351549517,"results":"14","hashOfConfig":"10"},{"size":10630,"mtime":1742351549518,"results":"15","hashOfConfig":"10"},{"size":1004,"mtime":1742351549517,"results":"16","hashOfConfig":"10"},{"size":8762,"mtime":1742351549518,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vt56p1",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"/home/radu/Server/src/takserver-tool-ui/src/index.js",[],[],"/home/radu/Server/src/takserver-tool-ui/src/MissionManager.js",["46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66"],[],"import './MissionManager.css'\nimport SendInviteMission from './SendInviteMission';\nimport TransferList from './TranferList';\nimport React, { useEffect, useRef } from 'react';\nimport { styled, useTheme } from '@mui/material/styles';\nimport { DataGrid, GridToolbarContainer, getGridStringOperators} from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Button, IconButton, ListItemText } from '@mui/material';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport RssFeedIcon from '@mui/icons-material/RssFeed';\nimport SendIcon from '@mui/icons-material/Send';\nimport TextField from '@mui/material/TextField';\nimport MailIcon from '@mui/icons-material/Mail';\nimport Select from '@mui/material/Select';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Chip from '@mui/material/Chip';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport moment from 'moment';\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport {useDropzone} from 'react-dropzone';\nimport UploadFile from './UploadFile';\nimport ArchiveIcon from '@mui/icons-material/Archive';\nimport Switch from '@mui/material/Switch';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport CodeIcon from '@mui/icons-material/Code';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport Tooltip from '@mui/material/Tooltip';\nimport { SubscriptRounded } from '@mui/icons-material';\n\nconst drawerWidth = 600;\n\nconst mockedRows = [{ id: '1', password: \"hh\", groups: [\"__ANON__\"], defaultRole: \"__ANON__\", type: 'public', chatRoom: \"A\", name: 'Row1', description: 'fdf', contents: ['file.txt'], keywords: 'dfd', uid: ['uid1'],\n              dataFeeds: [{id: 0, type:'stream'}]},\n              { id: '2', password: \"\", groups: [], type: 'vbm', chatRoom: \"\", hash: 'ID', name: 'Row1', description: 'fdf', contents: ['dfd', 'fdf', '1', '6a3d784d-a17f-44f1-b160-337852e8ae3b'], keywords: 'dfd', uid: ['dfd', 'fdf'],\n              dataFeeds: [{id: 1, type:'predicate'}] }]\n\nconst available = [{name: 'Hello', id: \"0\", type:'stream'},{name: 'World', id:\"1\", type:'predicate'},{name: 'Test', id:\"2\", type:'plugin'},{name: 'Stream', id: \"3\", type:'federate'},\n{name: 'Sweet', id:\"4\", type:'federate'}]\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\n              // Reset object needed for componets that access the selected row hook\nconst emptyRow = {name: \"\", hash: \"\"};\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 350,\n    },\n  },\n};\n\nfunction not(a, b) {\n  return a.filter((value) => b.indexOf(value) === -1);\n}\n\nconst Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(\n  ({ theme, open }) => ({\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: `-${drawerWidth}px`,\n    ...(open && {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    }),\n  }),\n);\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 , minHeight: '90vh'}}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\n// Custom Toolbar for data grid\nfunction MissionManagerToolbar({rowsSelected, setMultiDeleteOpen, handleAdd,\n                             handleEdit, handleDataFeeds, handleSendInvite, handleSendPackage,\n                            handleArchivedMissionsOpen}) \n{\n    return (\n        <GridToolbarContainer>\n            <Typography variant=\"h5\" className=\"FileManagerLabel\">Mission (COP) Manager</Typography>\n            <Button className=\"Toolbar\" color='error' startIcon={<DeleteIcon />}\n            disabled={rowsSelected.length===0} onClick={\n            (e) => {\n                setMultiDeleteOpen(true);\n            }  \n            }>Delete</Button>\n            <Button className=\"Toolbar\" color='primary' startIcon={<AddIcon />}\n            onClick={handleAdd}>Add </Button>\n            <Button className=\"Toolbar\" color='primary' startIcon={<DownloadIcon />}\n             href={rowsSelected.length===1 ? 'api/missions/'+ rowsSelected[0].name + '/archive' : \"\"} \n             disabled={rowsSelected.length!==1}>Download</Button>\n            <Button className=\"Toolbar\" color='primary' startIcon={<EditIcon />}\n            onClick={handleEdit} disabled={rowsSelected.length!==1}>Edit</Button>\n            <Button className=\"Toolbar\" color='primary' startIcon={<RssFeedIcon />}\n            onClick={handleDataFeeds} disabled={rowsSelected.length!==1}>Data Feeds</Button>\n            <Button className=\"Toolbar\" color='primary' startIcon={<SendIcon />}\n            onClick={handleSendPackage} disabled={rowsSelected.length!==1}>Send</Button>\n            <Button className=\"Toolbar\" color='primary' startIcon={<MailIcon />}\n            onClick={handleSendInvite} disabled={rowsSelected.length!==1}>Invite</Button>\n            <Button className=\"Toolbar\" color='primary' startIcon={<CodeIcon />}\n             href={rowsSelected.length===1 ? 'api/missions/'+ rowsSelected[0].name + '/kml' : \"\"} \n             disabled={rowsSelected.length!==1}>Kml Network Link</Button>\n             <Button className=\"Toolbar\" color='primary' startIcon={<DownloadIcon />}\n             href={rowsSelected.length===1 ? 'api/missions/'+ rowsSelected[0].name + '/kml?download=true' : \"\"} \n             disabled={rowsSelected.length!==1}>Download KML</Button>\n             <Button className=\"Toolbar\" color='primary' startIcon={<ArchiveIcon />}\n            onClick={handleArchivedMissionsOpen}>Archived Missions </Button>\n        </GridToolbarContainer>\n    );\n}\n\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})(({ theme, open }) => ({\n  transition: theme.transitions.create(['margin', 'width'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: `${drawerWidth}px`,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\nconst DrawerHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n  justifyContent: 'flex-end',\n}));\n\nconst stringOperators = getGridStringOperators().filter((op => ['contains'].includes(op.value)));\n\nconst columns = [\n  { field: 'id', headerName: 'ID', width: 1 },\n  { field: 'hash', headerName: 'hash', width: 1 },\n  { field: 'name', headerName: 'Name', width: 305, filterOperators: stringOperators,\n  renderCell: (params) => {\n      return (\n          <div>\n            <Tooltip title=\"View Json\">\n                <Button href={'api/missions/'+ params.value} \n                onClick={ (e) => {e.stopPropagation();}}\n                aria-label=\"Download\" style={{textTransform: 'none'}}>\n                {params.value}\n                </Button>\n              </Tooltip>\n              \n          </div>\n      );\n    } },\n  { field: 'description', headerName: 'Description', width: 185, sortable: false, filterable: false },\n  { field: 'contents', headerName: 'Contents', width: 265, sortable: false, filterable: false,\n  renderCell: (params) => {\n    return (\n      <List dense sx={{maxHeight: 100, overflow: 'auto', pl: 0}}>\n        {params.value.map((value) =>(\n          <ListItem sx={{pl: 0}}\n          key={value.name}>\n            <ListItemButton sx={{ height: 20, pl: 0 }} href={'/Marti/api/files/'+ value.hash}  \n            onClick={ (e) => {e.stopPropagation();}} >\n            <ListItemText sx={{ color: '#1769aa' }}\n             primary={value.name}/>\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n    )\n  } },\n  { field: 'dataFeeds', headerName: 'Data Feeds', width: 115, sortable: false, filterable: false,\n   renderCell: (params) => {\n    return (\n      <List dense sx={{maxHeight: 100, overflow: 'auto', pl: 0}}>\n        {params.value.map((value) =>(\n          <ListItem sx={{pl: 0}}\n          key={value.name}>\n            <ListItemButton \n            sx={{ height: 20, pl: 0 }} href={'/Marti/inputs/index.html#!/modifyPluginDataFeed/'+ value.name}  \n            onClick={ (e) => {e.stopPropagation();}} >\n            <ListItemText sx={{ color: '#1769aa' }}\n             primary={value.name}/>\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n    )\n  } },\n  { field: 'groups', headerName: 'Groups', width: 180, sortable: false, filterable: false,\n  renderCell: (params) => {\n    return (\n      <List dense sx={{maxHeight: 100, overflow: 'auto', pl: 0}}>\n        {params.value.map((value) =>(\n          <ListItem sx={{pl: 0}}\n          key={value}>\n            <ListItemText sx={{ color: '#1769aa' }}\n             primary={value}/>\n          </ListItem>\n        ))}\n      </List>\n    )\n  } },\n  { field: 'tool', headerName: 'Tool', width: 155, filterOperators: stringOperators },\n  { field: 'create_time', headerName: 'Create Time', width: 180, filterable: false,\n  renderCell: (params) => {\n      return (\n          <TextField variant=\"standard\"\n          value={moment(params.value).format(\"YYYY-MM-DDThh:mm\")}\n          InputProps={{\n              disableUnderline: true,\n            }}\n          />\n      ) }\n  },\n  { field: 'uid', headerName: 'UID', width: 210, sortable: false, filterOperators: stringOperators,\n  renderCell: (params) => {\n    return (\n      <List dense sx={{maxHeight: 100, overflow: 'auto', pl: 0}}>\n        {params.value.map((value) =>(\n          <ListItem sx={{pl: 0}}\n          key={value}>\n            <ListItemButton sx={{ height: 20, pl: 0 }} href={'/Marti/api/cot/xml/'+ value}  \n            onClick={ (e) => {e.stopPropagation();}} >\n            <ListItemText sx={{ color: '#1769aa' }}\n             primary={value}/>\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n    )\n  }},\n  { field: 'keywords', headerName: 'Keywords', width: 215, sortable: false, filterable: false },\n  { field: 'creatorUid', headerName: 'Creator Uid', width: 120, sortable: false, filterable: false }\n];\n\n// Structures for missions\nvar allMissions = [];\nvar copMissions = [];\n\nfunction MissionManager() {\n\n  // Dialog open hooks\n  const [multiDeleteOpen, setMultiDeleteOpen] = React.useState(false);\n  const [uploadOpen, setUploadOpen] = React.useState(false);\n  // Selected Row hooks\n  const [rowsSelected, setRowsSelected] = React.useState([]);\n  const [rows, setRows] = React.useState(mockedRows);\n\n  // Hooks for filters\n  const [expiration, setExpiration] = React.useState(\"\");\n  const [missionChanged, setMissionChanged] = React.useState(false);\n  const [value, setValue] = React.useState(0);\n  const [age, setAge] = React.useState(\"\");\n\n  const [checked, setChecked] = React.useState([]);\n\n  // Pagination system for grid\n  const [page, setPage] = React.useState(0);\n  const [paginationModel, setPaginationModel] = React.useState({\n    pageSize: 6,\n    page: 0,\n  });\n  const [rowCount, setRowCount] = React.useState(100);\n  const [loading, setLoading] = React.useState(false);\n  const [apiSent, setApiSent] = React.useState(false);\n\n  // Form hooks for Add\n  const [name, setName] = React.useState(\"\");\n  const [description, setDescription] = React.useState(\"\");\n  const [chatRoom, setChatRoom] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [defaultRole, setDefaultRole] = React.useState(\"\");\n  const [groups, setGroups] = React.useState([]);\n  const [allGroups, setAllGroups] = React.useState([]);\n  const [disableEditAndFeeds, setDisableEditAndFeeds] = React.useState(true);\n  const [disableAdd, setDisableAdd] = React.useState(false);\n  const [copChecked, setCopChecked] = React.useState(false);\n  const [tool, setTool] = React.useState(\"\");\n\n  // Extra hooks for Edit\n  const [contents, setContents] = React.useState([]);\n  const [uid, setUIDs] = React.useState([]);\n  const [uidToAdd, setUidToAdd] = React.useState(\"\");\n  const [uidOptions, setUidOptions] = React.useState(\"\");\n  const [uidOriginal, setUidOriginal] = React.useState([]);\n  const [contentsOriginal, setContentsOriginal] = React.useState([]);\n  const [keywordToAdd, setKeywordToAdd] = React.useState(\"\");\n  const [keywords, setKeywords] = React.useState([]);\n  const [keywordOriginal, setKeywordOriginal] = React.useState([]);\n  const [keywordShrink, setKeywordShrink] = React.useState(false);\n  const [uidShrink, setUidSkrink] = React.useState(false);\n\n  // Data feeds hooks for page\n  const [dataFeedsSelected, setDataFeedsSelected] = React.useState([]);\n  const [resetDataFeeds, setResetDataFeeds] = React.useState(false);\n  const [dataFeedsAvailable, setDataFeedsAvailable] = React.useState(available);\n  const [openSendInvite, setOpenSetInvite] = React.useState(false);\n  const [sendBool, setSendBool] = React.useState(false);\n  const [archivedMissions, setArchivedMissions] = React.useState([]);\n\n  //VBM mode toast\n  const [vbmMode, setVbmMode] = React.useState(false);\n  const [vbmToastOpen, setVbmToastOpen] = React.useState(false);\n  const [vbmSeverity, setVbmSeverity] = React.useState(\"\");\n\n  // Sorting via paged missions api\n  const [sort, setSort] = React.useState(\"\");\n  const [filter, setFilter] = React.useState(\"\");\n\n  const [archivedMissionOpen, setArchivedMissionOpen] = React.useState(false);\n\n  const handleSortModelChange = (newModel) => {\n    if(newModel.length === 0){\n        setSort(\"\");\n    } else{\n        if(newModel[0].sort === \"asc\"){\n            setSort(\"&sort=\"+newModel[0].field+\"&ascending=true\")\n        } \n        if(newModel[0].sort === \"desc\"){\n            setSort(\"&sort=\"+newModel[0].field+\"&ascending=false\")\n        }\n    }\n  };\n\n  const handleFilterModelChange = (newModel) => {\n    if(newModel.items !== null && newModel.items.length === 0){\n      setFilter(\"\")\n    } else {\n      // Model value can be null if set by user\n      if(newModel.items[0].value){\n        if (newModel.items[0].field === \"name\"){\n          setFilter(\"&nameFilter=\"+newModel.items[0].value)\n        }\n        if (newModel.items[0].field === \"tool\"){\n          setFilter(\"&tool=\"+newModel.items[0].value)\n        }\n        if (newModel.items[0].field === \"uid\"){\n          setFilter(\"&uidFilter=\"+newModel.items[0].value)\n        }\n      } else {\n        setFilter(\"\")\n      }\n    }\n    console.log(filter)\n  };\n\n  // Dropzone state management\n  const [fileProp, setFileProp] = React.useState(\"\");\n  const {getRootProps, getInputProps, open} = useDropzone({\n      // Note how this callback is never invoked if drop occurs on the inner dropzone\n      noClick: true,\n      onDrop: files => { \n          setFileProp(files[0]);\n          setUploadOpen(true);\n      }\n  });\n\n  function addOrEditMission(setValue, value, setApiSent, setMissionChanged, missionChanged, closeAfter) {\n    const requestOptions = {\n      method : 'PUT'\n    }\n    var url = '/Marti/api/missions/'+ name + '?';\n    if(description !== \"\"){\n      url += '&description=' + description;\n    }\n    if(chatRoom !== \"\"){\n      url += '&chatRoom=' + chatRoom;\n    }\n    if(password !== \"\" && password !== \"fakePassword\"){\n      url += '&password=' + password;\n    }\n    if(groups.lenth !== 0){\n      groups.forEach(function (group) {\n        url += \"&group=\" + group;\n      })\n      url += \"&allowGroupChange=true\";\n    }\n    if(tool.length !== 0){\n      url += \"&tool=\" + tool;\n    }\n    if(defaultRole !== \"\" && defaultRole != null){\n      url += \"&defaultRole=\" + defaultRole;\n    }\n    if(! isNaN(expiration) && expiration != null){\n      url += \"&expiration=\" + -1;\n    } else {\n      url += \"&expiration=\" + expiration;\n    }\n    setApiSent(true);\n    // delete log once complete\n    console.log(\"making request \"+ url)\n    fetch(url, requestOptions)\n        .then(response => {\n          if(!response.ok) console.log(\"response failed\")\n          if(response.ok) {\n            console.log(\"response OK\")\n            handleAddUIDs();\n            if(keywords !== []){\n              handleSetKeywords();\n            }\n            deleteUIDs();\n            deleteContents();\n            setApiSent(false);\n            setMissionChanged(!missionChanged);\n            setValue(value);\n          };\n        })\n  }\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChip = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setGroups(\n      // On autofill we get a stringified value.\n      typeof value === 'string' ? value.split(',') : value,\n    );\n  };\n\n  const handleContents = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setContents(\n      // On autofill we get a stringified value.\n      typeof value === 'string' ? value.split(',') : value,\n    );\n  };\n\n  const handleUid = (event) => {\n    const {\n      target: { value },\n    } = event;\n    if (value.length === 0){\n      setUidSkrink(false);\n    } else{\n      setUidSkrink(true);\n    }\n    setUIDs(\n      // On autofill we get a stringified value.\n      typeof value === 'string' ? value.split(',') : value,\n    );\n  };\n\n  const handleKeywordsChip = (event) => {\n    const {\n      target: { value },\n    } = event;\n    if (value.length === 0){\n      setKeywordShrink(false);\n    } else{\n      setKeywordShrink(true);\n    }\n    setKeywords(\n      // On autofill we get a stringified value.\n      typeof value === 'string' ? value.split(',') : value,\n    );\n  };\n\n    \n    useEffect(() => {\n      setLoading(true);\n      const pageSize = paginationModel.pageSize\n      var url = '/Marti/api/pagedmissions?passwordProtected=true&defaultRole=true&page='\n      +page+'&pagesize='+ pageSize + sort + filter\n        fetch(url)\n            .then(response => {\n              if(!response.ok) throw new Error(response.status);\n              else return response.json();\n            })\n            .then(data => {\n              var rows = [];\n              data.data.forEach(function (rowData, i) {\n                var role = rowData.defaultRole;\n                  var row = {\n                      id: (page * pageSize)  + i, \n                      password: \"\",\n                      groups: rowData.groups,\n                      name: rowData.name,\n                      defaultRole: role?.type,    \n                      keywords: rowData.keywords,\n                      tool: rowData.tool,\n                      chatRoom: rowData.chatRoom,\n                      description: rowData.description,\n                      expiration: rowData.expiration,\n                      create_time: rowData.createTime,\n                      creatorUid: rowData.creatorUid,\n                      uid: [],\n                      dataFeeds: [],\n                      contents: []\n                  }\n                  if(rowData.passwordProtected === true ){\n                    row.password = \"fakePassword\"\n                  }\n                  rowData.uids.forEach(function (uid){\n                    row.uid.push(uid.data)\n                  })\n                  rowData.feeds.forEach(function (feed, i){\n                    row.dataFeeds.push({id: feed.dataFeedUid, name:feed.name})\n                  })\n                  rowData.contents.forEach(function (file){\n                    var struct = {\n                      name: file.data.name,\n                      hash: file.data.hash\n                    }\n                    row.contents.push(struct)\n                  })\n                  rows.push(row);\n              });\n              setRows(rows);\n              // If we are on edit (content was uploaded), update the edit panel\n              if (rowsSelected.length === 1) {\n                rows.forEach(function (row){\n                  if (row.create_time === rowsSelected[0].create_time &&  row.name === rowsSelected[0].name){\n                    setRowsSelected([row]);\n                    if(value === 1){\n                      setContents(row.contents)\n                      setContentsOriginal(row.contents)\n                    }\n                  }\n                })\n              }\n              if(value === 1 && rowsSelected.length === 0){\n                rows.forEach(function (row){\n                  if (row.name === name){\n                    setContents(row.contents)\n                    setContentsOriginal(row.contents)\n                  }\n                })\n              }\n              setLoading(false);\n            });  \n      },[page, paginationModel, missionChanged, sort, filter])\n\n      useEffect(() => {\n        // Get the groups\n        fetch('/Marti/api/groups/all?useCache=false&sendLatestSA=false')\n        .then(response => response.json())\n        .then(data => {\n            var groupArray = []\n            data.data.forEach(function (rowData) {\n              groupArray.push(rowData.name);\n            })\n            setAllGroups(groupArray);\n        });\n\n        fetch('/Marti/api/sync/search?keyword=ARCHIVED_MISSION')\n        .then(response => response.json())\n        .then(data => {\n            var archivedMissionArray = []\n            data.data.forEach(function (rowData) {\n              var struct = {\n                name: rowData.name,\n                hash: rowData.hash\n              }\n              archivedMissionArray.push(struct);\n            })\n            setArchivedMissions(archivedMissionArray);\n        });\n\n        // Get groups for page\n        fetch('/Marti/api/missioncount?passwordProtected=true&defaultRole=true')\n        .then(response => response.json())\n        .then(data => {\n            setRowCount(data.data);\n        });\n\n        // Get the available data feeds\n      fetch('/Marti/api/datafeeds')\n      .then(response => response.json())\n      .then(data => {\n          var feedArray = []\n          data.data.forEach(function (rowData) {\n            feedArray.push({id: rowData.uuid, name: rowData.name, type:rowData.type});\n          })\n          setDataFeedsAvailable(feedArray);\n      });\n      }, [missionChanged])\n\n      useEffect(() => {\n        var url = '/Marti/api/cot/matchUid'\n        if(uidToAdd !== \"\" && uidToAdd != null){\n          url = url + \"?search=\" + uidToAdd;\n        }\n        fetch(url)\n            .then(response => {\n              if(!response.ok) {\n                setUidOptions([]);\n                throw new Error(response.status);\n              }\n              else return response.json();\n            }).then(data => {\n              var uidOptionsArray = []\n              data.forEach(function (rowData) {\n                uidOptionsArray.push(rowData);\n              })\n              setUidOptions(uidOptionsArray);\n          });\n      }, [uidToAdd])\n\n      useEffect (() => {\n        var url = '/vbm/api/config';\n        fetch(url)\n            .then(response => {\n              if(!response.ok) {\n                setVbmMode(false);\n                setVbmSeverity(\"info\")\n                setVbmToastOpen(true)\n                throw new Error(response.status);\n              }\n              else return response.json();\n            }).then(data => {\n              console.log(data)\n              if(data.vbmEnabled === true) {\n                setVbmMode(true);\n                setVbmSeverity(\"success\")\n                setVbmToastOpen(true)\n              } else{\n                setVbmMode(false);\n                setVbmSeverity(\"info\")\n                setVbmToastOpen(true)\n              }\n            })\n      }, [])\n\n      const theme = useTheme();\n      const [drawerOpen, setDrawerOpen] = React.useState(false);\n\n      const handleNextOrBack = () => {\n        if(value === 0){\n          setContents([])\n          addOrEditMission(setValue, 1, setApiSent, setMissionChanged, missionChanged);\n          setDisableEditAndFeeds(false);\n          setDisableAdd(true);\n        } else if(value === 1){\n          setResetDataFeeds(!resetDataFeeds);\n          addOrEditMission(setValue, 2, setApiSent, setMissionChanged, missionChanged);\n        } else {\n          handlePutDatafeeds();\n          setValue(1)\n        }\n        \n      }\n      \n      const handleDrawerClose = () => {\n        setDrawerOpen(false);\n      };\n\n      const handleSaveAndClose = () => {\n        if(value === 2){\n          handlePutDatafeeds();\n        } else if(value === 1){\n          setResetDataFeeds(!resetDataFeeds);\n          addOrEditMission(setValue, 2, setApiSent, setMissionChanged, missionChanged);\n        } else{\n          addOrEditMission(setValue, 1, setApiSent, setMissionChanged, missionChanged);\n        }\n        setDrawerOpen(false);\n      } \n\n      const handleSendInvite = () => {\n        setSendBool(false);\n        setOpenSetInvite(true);\n      }\n\n      const handleArchivedMissionsClose = () => {\n        setArchivedMissionOpen(false)\n      }\n\n      const handleArchivedMissionsOpen = () => {\n        setArchivedMissionOpen(true)\n      }\n\n\n      const handleSendPackage = () => {\n        setSendBool(true);\n        setOpenSetInvite(true);\n      }\n\n      const handleAdd = () => {\n        var emptyArrUid = [];\n        var emptyArrKeyword = [];\n        setRowsSelected([]);\n        setDisableEditAndFeeds(true);\n        setDisableAdd(false);\n        setName(\"\");\n        setDescription(\"\");\n        setChatRoom(\"\");\n        setCopChecked(false);\n        setDefaultRole([]);\n        setPassword(\"\");\n        setTool(\"public\")\n        setUIDs(emptyArrUid);\n        setUidOriginal(emptyArrUid);\n        setKeywords(emptyArrKeyword);\n        setKeywordOriginal(emptyArrKeyword);\n        setContents([]);\n        setGroups([]);\n        setDrawerOpen(true);\n        setValue(0);\n      }\n\n      const handleEdit = () => {\n        setName(rowsSelected[0].name)\n        setDescription(rowsSelected[0].description)\n        setContents(rowsSelected[0].contents)\n        setContentsOriginal(rowsSelected[0].contents)\n        setUIDs(rowsSelected[0].uid)\n        if(rowsSelected[0].uid.length !== 0){\n          setUidSkrink(true)\n        } else {\n          setUidSkrink(false)\n        }\n        setUidOriginal(rowsSelected[0].uid)\n        setKeywords(rowsSelected[0].keywords)\n        if(rowsSelected[0].keywords.length !== 0){\n          setKeywordShrink(true)\n        } else {\n          setKeywordShrink(false)\n        }\n        setKeywordOriginal(rowsSelected[0].keywords)\n        setDefaultRole(rowsSelected[0].defaultRole)\n        setChatRoom(rowsSelected[0].chatRoom)\n        setGroups(rowsSelected[0].groups)\n        setExpiration(rowsSelected[0].expiration)\n        setPassword(rowsSelected[0].password)\n        setDataFeeds(rowsSelected[0].dataFeeds)\n        if(rowsSelected[0].tool === \"vbm\"){\n          setCopChecked(true);\n        } else{\n          setCopChecked(false);\n        }\n        setTool(rowsSelected[0].tool)\n        setResetDataFeeds(!resetDataFeeds);\n        setDisableEditAndFeeds(false);\n        \n        setDisableAdd(true);\n        setDrawerOpen(true);\n        setValue(1);\n      }\n\n      function handlePutDatafeeds(){\n        var feedStructArray = []\n        dataFeedsSelected.forEach(function (arrayItem) {\n          var struct = {\n            dataFeedUid: arrayItem.id,\n            name: arrayItem.name\n          }\n          feedStructArray.push(struct);\n        })\n        const data = \"{ \\\"feeds\\\":\" + JSON.stringify(feedStructArray) + \"}\";\n        console.log(data);\n        var url = '/Marti/api/missions/'+ name\n        fetch(url, {\n          method: \"PUT\",\n          headers: {'Content-Type':'application/json'},\n          body: data\n        }).then(function (res) {\n          if (!res.ok) {console.log(\"data feeds not set\")}\n          if (res.ok) {setMissionChanged(!missionChanged)\n            setDrawerOpen(false);}\n        })\n\n      }\n\n      function handleAddUIDs(){\n        var uidStructArray = []\n        if(uid.length > 0){\n          uid.forEach(function (arrayItem) {\n            uidStructArray.push(arrayItem);\n          })\n          const data = \"{ \\\"uids\\\":\" + JSON.stringify(uidStructArray) + \"}\";\n          console.log(data);\n          var url = '/Marti/api/missions/'+ name + '/contents'\n          fetch(url, {\n            method: \"PUT\",\n            headers: {'Content-Type':'application/json'},\n            body: data\n          }).then(function (res) {\n            if (!res.ok) {console.log(\"uids not set\")}\n            if (res.ok) {setMissionChanged(!missionChanged)}\n          })\n        }\n      }\n\n      function deleteUIDs(){\n        var arrayToDel = uidOriginal.filter(function(val) {\n          return uid.indexOf(val) == -1;\n        });\n        var urls = [];\n        if(arrayToDel.length > 0){\n          arrayToDel.forEach(function (rowData) {\n              var url = '/Marti/api/missions/'+ name + '/contents?uid=' + rowData\n              urls.push(url);\n          })\n          Promise.all(urls.map(url =>\n              fetch(url, { method: 'DELETE' }).then()\n          )).then(() => {\n            setMissionChanged(!missionChanged)\n          })\n        }\n    }\n\n    function deleteContents(){\n      var arrayToDel = contentsOriginal.filter(function(val) {\n        return contents.indexOf(val) == -1;\n      });\n      var urls = [];\n      if(arrayToDel.length > 0){\n        arrayToDel.forEach(function (rowData) {\n            var url = '/Marti/api/missions/'+ name + '/contents?hash=' + rowData.hash\n            urls.push(url);\n        })\n        Promise.all(urls.map(url =>\n            fetch(url, { method: 'DELETE' }).then()\n        )).then(() => {\n          setMissionChanged(!missionChanged)\n        })\n      }\n    }\n\n      const handleSetRemovePasswords = () => {\n        if(password !== \"fakePassword\"){\n          var url = '/Marti/api/missions/'+ name + '/password?password=' + password\n          fetch(url, {\n            method: \"PUT\"\n          }).then(function (res) {\n            if (res.ok) {setPassword(\"fakePassword\")}\n          })\n        } else {\n          var url = '/Marti/api/missions/'+ name + '/password'\n          fetch(url, {\n            method: \"DELETE\"\n          }).then(function (res) {\n            if (res.ok) {setPassword(\"\")}\n          })\n        }\n      }\n\n      const handleSetKeywords = () => {\n        var url = '/Marti/api/missions/'+ name + '/keywords'\n        console.log(\"setting:\" + url);\n        var keywordsBody = JSON.stringify(keywords)\n        fetch(url, {\n          method: \"PUT\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: keywordsBody\n        }).then(function (res) {\n          if (!res.ok && rowsSelected.length > 0) {setKeywords(rowsSelected[0].keywords)}\n        })\n      }\n\n      const handleDataFeeds = () => {\n        handleEdit()\n        setValue(2);\n      }\n\n      const handleVbmClose = (event, reason) => {\n        if (reason === 'clickaway') {\n          return;\n        }\n    \n        setVbmToastOpen(false);\n      };\n\n      const handleDeleteMissions = () => {\n        var urls = [];\n        if(rowsSelected.length > 0){\n          rowsSelected.forEach(function (rowData) {\n              var url = '/Marti/api/missions/'+ rowData.name\n              urls.push(url);\n          })\n          Promise.all(urls.map(url =>\n              fetch(url, { method: 'DELETE' }).then()\n          )).then(() => {\n            setMissionChanged(!missionChanged)\n            setMultiDeleteOpen(false);\n          })\n        }\n        \n      }\n\n      function setDataFeeds(selected){\n        var finalSelect = [];\n        selected.forEach(function (arrayItem) {\n          finalSelect.push(dataFeedsAvailable.find(item => item.id === arrayItem.id));\n        })\n        setDataFeedsSelected(finalSelect);\n      }\n    \n\n    return (\n      \n        <Box sx={{ display: 'flex' }}>\n          <CssBaseline />\n          <Drawer\n            sx={{\n              width: drawerWidth,\n              flexShrink: 0,\n              '& .MuiDrawer-paper': {\n                width: drawerWidth,\n                boxSizing: 'border-box',\n              },\n            }}\n            variant=\"persistent\"\n            anchor=\"left\"\n            open={drawerOpen}\n          >\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={value} onChange={handleChange} variant=\"fullWidth\" aria-label=\"basic tabs example\">\n              <Tab label=\"Add\" disabled={disableAdd} {...a11yProps(0)} />\n              <Tab label=\"Edit\" disabled={disableEditAndFeeds} {...a11yProps(1)} />\n              <Tab label=\"Data Feeds\" disabled={disableEditAndFeeds} {...a11yProps(2)} />\n            </Tabs>\n          </Box>\n          <Backdrop\n              sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n              open={apiSent}\n            >\n              <CircularProgress color=\"inherit\" />\n            </Backdrop>\n          <TabPanel value={value} index={0} >\n          <TextField\n          sx={{width: .8}}\n              margin=\"dense\"\n              id=\"name\"\n              value={name}\n              onChange={(event) => {\n                setName(event.target.value);\n              }}\n              label=\"Name (Required)\"\n              fullWidth\n              variant=\"standard\"\n            />\n            <TextField\n            sx={{width: .8}}\n              margin=\"dense\"\n              id=\"description\"\n              value={description}\n              onChange={(event) => {\n                setDescription(event.target.value);\n              }}\n              label=\"Description (Optional)\"\n              fullWidth\n              variant=\"standard\"\n            />\n            <TextField\n            sx={{width: .8}}\n              margin=\"dense\"\n              id=\"chatRoom\"\n              value={chatRoom}\n              onChange={(event) => {\n                setChatRoom(event.target.value);\n              }}\n              label=\"Chat Room (Optional)\"\n              fullWidth\n              variant=\"standard\"\n            />\n            <TextField\n            sx={{width: .8}}\n              margin=\"dense\"\n              id=\"password\"\n              value={password}\n              onChange={(event) => {\n                setPassword(event.target.value);\n              }}\n              label=\"Password (Optional)\"\n              type=\"password\"\n              fullWidth\n              variant=\"standard\"\n            />\n            <div>\n            <Typography className='copSwitch' variant=\"body1\">Mark as COP</Typography>\n            <Switch className='copSwitch'\n                checked={copChecked}\n                onChange={(e) => {setCopChecked(e.target.checked)\n                                  if(e.target.checked === true){\n                                    setTool(\"vbm\")\n                                  } else {\n                                    setTool(\"public\")\n                                  }}}\n                inputProps={{ 'aria-label': 'controlled' }}\n            />\n            <TextField\n            sx={{width: .8}}\n              margin=\"dense\"\n              id=\"tool\"\n              value={tool}\n              onChange={(event) => {\n                setTool(event.target.value);\n              }}\n              label=\"Tool\"\n              fullWidth\n              variant=\"standard\"\n            />\n            </div>\n            <TextField \n                sx={{width: .8, paddingBottom:3}}\n                id=\"defaultRole\"\n                label=\"defaultRole\"\n                select\n                value={defaultRole}\n                onChange={\n                    (e) => {\n                        setDefaultRole(e.target.value)\n                    }\n                }\n            ><MenuItem value={\"MISSION_SUBSCRIBER\"}>MISSION_SUBSCRIBER</MenuItem>\n            <MenuItem value={\"MISSION_OWNER\"}>MISSION_OWNER</MenuItem>\n            <MenuItem value={\"MISSION_READONLY_SUBSCRIBER\"}>MISSION_READONLY_SUBSCRIBER</MenuItem>\n            </TextField>\n            <FormControl>\n            <InputLabel id=\"groups-label\">Groups</InputLabel>\n            <Select style={{width: 440}}\n              label=\"Groups\"\n              labelId=\"groups-label\"\n              id=\"mission-multiple-chip\"\n              multiple\n              value={groups}\n              onChange={handleChip}\n              input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value} label={value} />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >{allGroups.map((group) => (\n              <MenuItem\n                key={group}\n                value={group}\n              >\n                {group}\n              </MenuItem>\n            ))}\n            </Select>\n            </FormControl>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n          <div {...getRootProps({className: 'dropzone'})} >\n          <TextField\n          sx={{width: .8}}\n              margin=\"dense\"\n              id=\"name\"\n              value={name}\n              onChange={(event) => {\n                setName(event.target.value);\n              }}\n              label=\"Name (Required)\"\n              fullWidth\n              variant=\"standard\"\n            />\n            <TextField\n            sx={{width: .8}}\n              margin=\"dense\"\n              id=\"description\"\n              value={description}\n              onChange={(event) => {\n                setDescription(event.target.value);\n              }}\n              label=\"Description (Optional)\"\n              fullWidth\n              variant=\"standard\"\n            />\n            <TextField\n            sx={{width: .8}}\n              margin=\"dense\"\n              id=\"chatRoom\"\n              value={chatRoom}\n              onChange={(event) => {\n                setChatRoom(event.target.value);\n              }}\n              label=\"Chat Room (Optional)\"\n              fullWidth\n              variant=\"standard\"\n            />\n            <div>\n            <Typography className='copSwitch' variant=\"body1\">Mark as COP</Typography>\n            <Switch className='copSwitch'\n                checked={copChecked}\n                onChange={(e) => {setCopChecked(e.target.checked)\n                                  if(e.target.checked === true){\n                                    setTool(\"vbm\")\n                                  } else {\n                                    setTool(\"public\")\n                                  }}}\n                inputProps={{ 'aria-label': 'controlled' }}\n            />\n            </div>\n            <TextField\n            sx={{width: .8}}\n              margin=\"dense\"\n              id=\"tool\"\n              value={tool}\n              onChange={(event) => {\n                setTool(event.target.value);\n              }}\n              label=\"Tool\"\n              fullWidth\n              variant=\"standard\"\n            />\n            <TextField \n                sx={{width: .8, paddingBottom:3}}\n                id=\"defaultRole\"\n                label=\"defaultRole\"\n                select\n                value={defaultRole}\n                onChange={\n                    (e) => {\n                        setDefaultRole(e.target.value)\n                    }\n                }\n            ><MenuItem value={\"MISSION_SUBSCRIBER\"}>MISSION_SUBSCRIBER</MenuItem>\n            <MenuItem value={\"MISSION_OWNER\"}>MISSION_OWNER</MenuItem>\n            <MenuItem value={\"MISSION_READONLY_SUBSCRIBER\"}>MISSION_READONLY_SUBSCRIBER</MenuItem>\n            </TextField>\n            <FormControl sx={{paddingBottom:3}}>\n            <InputLabel id=\"groups-label\">Groups</InputLabel>\n            <Select style={{width: 440}}\n              label=\"Groups\"\n              labelId=\"groups-label\"\n              id=\"mission-multiple-chip\"\n              multiple\n              labelWidth={ \"text\".length * 9}\n              value={groups}\n              onChange={handleChip}\n              input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value} label={value} />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >{allGroups.map((group) => (\n              <MenuItem\n                key={group}\n                value={group}\n              >\n                {group}\n              </MenuItem>\n            ))}\n            </Select>\n            </FormControl>\n            <TextField  sx={{width: .8, paddingBottom:3}}\n                    label=\"Expiration\"\n                    id=\"datetime-local\"\n                    type=\"datetime-local\"\n                    value={expiration === -1 || expiration === \"\" ? \"\" : moment.unix(expiration).format('YYYY-MM-DDThh:mm')}\n                    onClick={ (e) => {e.stopPropagation();}}\n                    onChange={(e) => {\n                        setExpiration(moment.utc(e.target.value).unix())\n                    }}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n            <FormControl sx={{paddingBottom:3}}>\n            <InputLabel id=\"contents-label\">Contents</InputLabel>\n            <Select style={{width: 335}}\n              label=\"Contents\"\n              labelId=\"contents-label\"\n              id=\"content-multiple-chip\"\n              multiple\n              labelWidth={ \"text\".length * 9}\n              value={contents}\n              onChange={handleContents}\n              input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value.name} label={value.name} />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >{contentsOriginal.map((el) => (\n              <MenuItem\n                key={el.name}\n                value={el}\n              >\n                {el.name}\n              </MenuItem>\n            ))}\n            </Select>\n            </FormControl>\n            <input {...getInputProps()} />\n            <Button variant=\"text\" sx={{width:.2, paddingTop:2}} onClick={open}>Add File</Button>\n            <FormControl>\n            <InputLabel id=\"uid-label\" shrink={uidShrink}>UIDs</InputLabel>\n            <Select style={{width: 335}}\n              label=\"UIDs\"\n              labelId=\"uid-label\"\n              id=\"uid-multiple-chip\"\n              multiple\n              labelWidth={ \"text\".length * 9}\n              value={uid}\n              onChange={handleUid}\n              input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value} label={value} />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >{uidOriginal.map((el) => (\n              <MenuItem\n                key={el}\n                value={el}\n              >\n                {el}\n              </MenuItem>\n            ))}\n            </Select>\n            </FormControl>\n            <FormControl>\n            <InputLabel id=\"uidToAdd-label\"></InputLabel>\n            <Autocomplete\n              style={{width: 335,  paddingTop:20}}\n              labelId=\"uidToAdd-label\"\n              inputValue={uidToAdd}\n              onInputChange={(event, newInputValue) => {\n                setUidToAdd(newInputValue);\n              }}\n              id=\"uid-add\"\n              options={uidOptions}\n              renderInput={(params) => <TextField style={{width: 335}} {...params} label=\"UID\" />}\n            />\n            </FormControl>\n            <Button variant=\"text\" sx={{width:.2, paddingTop:4, paddingBottom:5}} onClick={() =>{\n              uidOriginal.push(uidToAdd);\n              setUidOriginal(uidOriginal);\n              setUidSkrink(true);\n              setUidToAdd(\"\");\n            }}>Add</Button>\n            <FormControl>\n            <InputLabel id=\"keywords-label\" shrink={keywordShrink}>Keywords</InputLabel>\n            <Select style={{width: 335}}\n              label=\"Keywords\"\n              labelId=\"keyword-label\"\n              id=\"keyword-multiple-chip\"\n              multiple\n              labelWidth={ \"text\".length * 9}\n              value={keywords}\n              onChange={handleKeywordsChip}\n              input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value} label={value} />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >{keywordOriginal.map((el) => (\n              <MenuItem\n                key={el}\n                value={el}\n              >\n                {el}\n              </MenuItem>\n            ))}\n            </Select>\n            </FormControl>\n            <TextField\n            sx={{width: .6}}\n              margin=\"dense\"\n              id=\"keywords-add\"\n              label=\"Keywords\"\n              value={keywordToAdd}\n              onChange={(event) => {\n                setKeywordToAdd(event.target.value)\n              }}\n              fullWidth\n              variant=\"standard\"\n            />\n            <Button variant=\"text\" sx={{width:.2, paddingTop:2}} onClick={() =>{\n              keywordOriginal.push(keywordToAdd);\n              setKeywordOriginal(keywordOriginal);\n              setKeywordShrink(true)\n              setKeywordToAdd(\"\");\n            }}>Add</Button>\n            <TextField\n            sx={{width: .6}}\n            margin=\"dense\"\n            id=\"password\"\n            value={password}\n            disabled={password === \"fakePassword\"}\n            onChange={(event) => {\n              setPassword(event.target.value);\n            }}\n            label=\"Password (Optional)\"\n            type=\"password\"\n            fullWidth\n            variant=\"standard\"\n            />\n            <Button variant=\"text\" sx={{width:.2, paddingTop:2}}\n            disabled={password === \"\"} \n            onClick={handleSetRemovePasswords}>\n              {password === \"fakePassword\" ? \"Remove\" : \"Set\"}\n            </Button>\n          </div>\n          </TabPanel>\n          <TabPanel value={value} index={2} >\n          <TransferList available={dataFeedsAvailable} selected={dataFeedsSelected} setSelected={setDataFeedsSelected}\n          resetList={resetDataFeeds}/>\n          </TabPanel>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', display: 'flex', justifyContent: 'space-evenly' }}>\n          <Button variant=\"text\" disabled={name === \"\" && value === 0} onClick={handleNextOrBack}>{value === 2 ? \"Save & Go Back\" : \"Save & Next\"}</Button>\n          <Button variant=\"text\" disabled={name === \"\"} onClick={handleSaveAndClose}>Save & Close</Button>\n          <Button variant=\"text\" onClick={handleDrawerClose}>Cancel & Close</Button>\n          </Box>\n          </Drawer>\n          <Main open={drawerOpen} className=\"DataTable\">\n          <DataGrid \n            rows={rows}\n            columns={columns}\n            columnVisibilityModel={{\n                id: false,\n                hash: false\n            }}\n            rowsSelected={rowsSelected}\n            rowHeight={100}\n            onRowSelectionModelChange={(ids) => {\n              const selectedRowData = ids.map((id) => \n                  rows.find((row) => row.id === id\n              ));\n              setRowsSelected(selectedRowData);\n            }}\n            pagination\n            autoPageSize\n            sortingMode=\"server\"\n            onSortModelChange={handleSortModelChange}\n            filterMode=\"server\"\n            onFilterModelChange={handleFilterModelChange}\n            checkboxSelection\n            page={page}\n            onPageChange={(newPage) => {\n              setPage(newPage)\n            }}\n            rowCount={rowCount}\n            paginationMode=\"server\"\n            paginationModel={paginationModel}\n            onPaginationModelChange={(pgModel) => {\n                setPaginationModel(pgModel)\n                setPage(pgModel.page)\n                }\n            }\n            components={{\n              Toolbar: MissionManagerToolbar\n            }}\n            componentsProps={{ toolbar: {rowsSelected, setMultiDeleteOpen, handleAdd, \n              handleEdit, handleDataFeeds, handleSendInvite, handleSendPackage, handleArchivedMissionsOpen}}}\n            />\n            <Snackbar open={vbmToastOpen} autoHideDuration={6000} onClose={handleVbmClose}>\n              <Alert onClose={handleVbmClose} severity={vbmSeverity} sx={{ width: '100%' }}>\n                {vbmMode === true ? \"VBM Mode enabled\" :\"VBM Mode not enabled\" } \n              </Alert>\n            </Snackbar>\n          </Main>\n          <UploadFile openHook={uploadOpen} setOpenHook={setUploadOpen}\n                    deleted={missionChanged} setDeleted={setMissionChanged}\n                    fileProp={fileProp} setFileProp={setFileProp} selectedMission={name}/>\n          <SendInviteMission openHook={openSendInvite} setOpenHook={setOpenSetInvite} \n          sendBool={sendBool} missionSelected={rowsSelected}/>\n          <Dialog open={multiDeleteOpen}>\n            <DialogTitle id=\"alert-dialog-title\">\n            {\"Delete \" + rowsSelected.length + \" Missions ?\"}\n            </DialogTitle>\n            <DialogContent>\n            <DialogContentText>\n                The selected missions will be removed from the database\n            </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={() => setMultiDeleteOpen(false)}>Cancel</Button>\n            <Button onClick={handleDeleteMissions} autoFocus>\n                Delete\n            </Button>\n            </DialogActions>\n          </Dialog>\n          <Dialog open={archivedMissionOpen} onClose={handleArchivedMissionsClose}\n                  fullWidth={true}\n                  scroll={\"paper\"}\n                  maxWidth={\"xl\"}>\n            <DialogTitle textAlign=\"center\">Archived Missions</DialogTitle>\n            <DialogContent dividers={true}>\n            <List sx={{textAlign: 'center'}}>\n            {archivedMissions.map((m) => (\n              <ListItem sx={{textAlign: 'center'}} component=\"a\" href={\"/Marti/sync/content?hash=\" + m.hash}>\n              <ListItemText \n                primary={\"\" + m.name}\n              />\n            </ListItem>\n            ))}\n          </List>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleArchivedMissionsClose}>Close</Button>\n          </DialogActions>\n          </Dialog>\n        </Box>\n      );\n    \n}\n\nexport default MissionManager;","/home/radu/Server/src/takserver-tool-ui/src/MenuBar.js",[],[],"/home/radu/Server/src/takserver-tool-ui/src/FileManager.js",["67","68"],[],"import './FileManager.css';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { DataGrid, GridToolbarContainer, gridPageSizeSelector, gridFilteredTopLevelRowCountSelector,\n    useGridRootProps, GridPagination, useGridSelector, useGridApiContext, GridCellModes, getGridStringOperators} from '@mui/x-data-grid';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SearchIcon from '@mui/icons-material/Search';\nimport FilterAltIcon from '@mui/icons-material/FilterAlt';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Button, IconButton } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport moment from 'moment';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport InputLabel from '@mui/material/InputLabel';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport Typography from '@mui/material/Typography';\nimport UploadFile from './UploadFile';\nimport {useDropzone} from 'react-dropzone';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Switch from '@mui/material/Switch';\nimport Pagination from '@mui/material/Pagination';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Footer from './Footer';\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\n\n\n// Reset object needed for componets that access the selected row hook\nconst emptyRow = {name: \"\", hash: \"\"};\n\nconst StyledGridOverlay = styled(\"div\")(({ theme }) => ({\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100%\",\n    overflow: \"hidden\",\n    pointerEvents: \"none\",\n    variant: \"contained\",\n  \n    // To make overlay elements interactive\n    position: \"relative\",\n    zIndex: 0,\n  }));\n  \nfunction CustomNoRowsOverlay() {\nreturn (\n    <StyledGridOverlay>\n    <Box sx={{zIndex: 0, pointerEvents: \"none\" }}>No Files</Box>\n    </StyledGridOverlay>\n);\n}\n\n// Structures for missions\nvar allMissions = [];\nvar copMissions = [];\n\nconst getPageCount = (rowCount, pageSize) => {\n    if (pageSize > 0 && rowCount > 0) {\n      return Math.ceil(rowCount / pageSize);\n    }\n  \n    return 0;\n  };\n\n// Component needed for Delete column rendering\nfunction DeleteButton({setOpen, row, setRow, value})\n{\nreturn (\n    <Button variant=\"outlined\" color='error' startIcon={<DeleteIcon />}\n                    onClick={ (e) => {\n                        e.stopPropagation();\n                        setRow(row);\n                        setOpen(true);\n                    }}\n                    >\n                    {value}\n    </Button>\n)\n}\n\n// Custom Pagination Controller for Grid\nfunction ActionPagination({ page, onPageChange, className}) {\n    const apiRef = useGridApiContext();\n    const rootProps = useGridRootProps();\n    const pageSize = useGridSelector(apiRef, gridPageSizeSelector);\n    const [searchPage, setSearchPage] = React.useState({event: null, value: 1});\n    const visibleTopLevelRowCount = useGridSelector(\n        apiRef,\n        gridFilteredTopLevelRowCountSelector\n      );\n    const pageCount = getPageCount(\n        rootProps.rowCount ?? visibleTopLevelRowCount,\n        pageSize\n    );\n\n    useEffect(() => {\n        const delayDebounceFn = setTimeout(() => {\n            onPageChange(searchPage.event, searchPage.value-1);\n        }, 1000)\n    \n        return () => clearTimeout(delayDebounceFn)\n    }, [searchPage])\n\n    return (\n        <>\n        <Typography className={className} variant=\"body1\" sx={{ml: 5}}>Go to Page: </Typography>\n        <TextField size=\"small\"\n        value={searchPage.value}\n        onChange={(event) => {\n            setSearchPage({event: event, value: event.target.value});\n        }}\n        />\n        <Pagination\n        color=\"primary\"\n        className={className}\n        count={pageCount}\n        page={page + 1}\n        siblingCount={1}\n        boundaryCount={1}\n        showFirstButton showLastButton\n        onChange={(event, newPage) => {\n            onPageChange(event, newPage - 1);\n        }}\n    />\n    </>\n    );\n}\n\nActionPagination.propTypes = {\n    className: PropTypes.string,\n    /**\n     * Callback fired when the page is changed.\n     *\n     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\n     * @param {number} page The page selected.\n     */\n    onPageChange: PropTypes.func.isRequired,\n    /**\n     * The zero-based index of the current page.\n     */\n    page: PropTypes.number.isRequired\n\n\n  };\n\nfunction CustomPagination(props) {\n    return <GridPagination ActionsComponent={ActionPagination} {...props}/>;\n}\n\n// Custom Toolbar for data grid\nfunction FileManagerToolbar({rowsSelected, setMultiDeleteOpen, open, setFilter, \n                             filterPackage, setFilterPackage, missions, setMissions,\n                             mission, setMission, copChecked, setCopChecked, setNameMatch}) \n{\n    const [searchText, setSearchText] = React.useState(\"\");\n    return (\n        <GridToolbarContainer>\n            <Typography variant=\"h5\" className=\"FileManagerLabel\">File Manager</Typography>\n            <Button className=\"Toolbar\" color='error' startIcon={<DeleteIcon />}\n            disabled={rowsSelected.length===0} onClick={\n            (e) => {\n                setMultiDeleteOpen(true);\n            }  \n            }>Delete</Button>\n            <Button className=\"Toolbar\" color='primary' startIcon={<FilterAltIcon />}\n            style={{ marginRight: 16 }} selected={filterPackage} onClick={\n                (e) => {\n                    if(!filterPackage){\n                        setFilter(\"missionPackage=true\")\n                        \n                    } else {\n                        setFilter(\"\")\n                        setMission(\"\")\n                    }\n                    setFilterPackage(!filterPackage)\n                }}>{filterPackage ? \"Remove Filters\" : \"Mission Package\"} </Button>\n            <Typography variant=\"body1\" className=\"MissionFilter\">Mission: </Typography>\n            <FormControl>\n            <InputLabel id=\"Missions-label\">Mission Filter</InputLabel>\n            <Select style={{width: 250}}\n                value={mission}\n                labelId=\"Missions-label\"\n                label=\"Mission\"\n                onChange={\n                    (e) => {\n                        setMission(e.target.value)\n                        setFilter(\"mission=\" + e.target.value)\n                        setFilterPackage(true)\n                    }\n                }\n            >\n            {missions.map((m) => (\n                <MenuItem\n                key={m}\n                value={m}\n                >\n                    {m}\n                </MenuItem>\n            ))}\n            </Select>\n            </FormControl>\n            <Switch\n                checked={copChecked}\n                onChange={\n                    (e) => {\n                        if(e.target.checked === false){\n                            setMissions(allMissions)\n                        } else {\n                            setMissions(copMissions)\n                        }\n                        setCopChecked(e.target.checked)\n                        if(mission !== \"\"){\n                            setFilter(\"\")\n                            setMission(\"\")\n                            setFilterPackage(false)\n                        }\n                    }\n                }\n                inputProps={{ 'aria-label': 'controlled' }}\n            />\n            <Typography variant=\"body1\" style={{ marginRight: 16 }}>Show Only COPs</Typography>\n            <Button className=\"Toolbar\" color='primary' startIcon={<FileUploadIcon />}\n            style={{ marginRight: 16 }} onClick={open}>Upload</Button>\n            <TextField\n                label=\"Filter By Filename\"\n                value={searchText}\n                onChange={(event) => {\n                    setSearchText(event.target.value);\n                    setNameMatch(\"&name=\"+event.target.value)\n                  }\n                }\n                InputProps={{\n                    endAdornment: (\n                    <InputAdornment>\n                        <IconButton onClick={() => {\n                            setSearchText(\"\")\n                            setNameMatch(\"\")\n                        }} >\n                            {searchText === \"\" ? <SearchIcon/> : <CloseIcon/>}\n                        </IconButton>\n                    </InputAdornment>\n                    )\n                }}\n            />\n            \n        </GridToolbarContainer>\n    );\n} \n\nfunction FileManager() {\n    // Dialog open hooks\n    const [deleteOpen, setDeleteOpen] = React.useState(false);\n    const [multiDeleteOpen, setMultiDeleteOpen] = React.useState(false);\n    const [uploadOpen, setUploadOpen] = React.useState(false);\n    // Selected Row hooks\n    const [rowToDelete, setRow] = React.useState(emptyRow);\n    const [rowsSelected, setRowsSelected] = React.useState([]);\n    // Fetched data hook\n    const [rows, setRows] = React.useState([]);\n    // Hook used to in useEffect to trigger data hydration\n    const [deleted, setSomethingDeleted] = React.useState(false);\n    // Pagination system for grid\n    const [page, setPage] = React.useState(0);\n    //const [pageSize, setPageSize] = React.useState(12);\n    const [rowCount, setRowCount] = React.useState(100);\n    const [loading, setLoading] = React.useState(false);\n    const [paginationModel, setPaginationModel] = React.useState({\n        pageSize: 12,\n        page: 0,\n      });\n\n    // Hooks for filters\n    const [filter, setFilter] = React.useState(\"\");\n    const [filterPackage, setFilterPackage] = React.useState(false);\n    const [nameMatch, setNameMatch] = React.useState(\"\");\n    const [missions, setMissions] = React.useState([]);\n    const [mission, setMission] = React.useState([]);\n    const [copChecked, setCopChecked] = React.useState(false);\n    const [sort, setSort] = React.useState(\"\");\n\n    // Grid Api Ref to make edit button work\n    const [cellModesModel, setCellModesModel] = React.useState({});\n\n    const handleSortModelChange = (newModel) => {\n        if(newModel.length === 0){\n            setSort(\"\");\n        } else{\n            if(newModel[0].sort === \"asc\"){\n                setSort(\"&sort=\"+newModel[0].field+\"&ascending=true\")\n            } \n            if(newModel[0].sort === \"desc\"){\n                setSort(\"&sort=\"+newModel[0].field+\"&ascending=false\")\n            }\n        }\n    };\n\n    const handleFilterModelChange = (newModel) => {\n        if(newModel.items !== null && newModel.items.length === 0){\n          setNameMatch(\"\");\n        } else {\n          // Model value can be null if set by user\n          if(newModel.items[0].value){\n            if (newModel.items[0].field === \"name\"){\n              setNameMatch(\"&name=\"+newModel.items[0].value)\n            }\n          } else {\n            setNameMatch(\"\")\n          }\n        }\n        console.log(nameMatch)\n      };\n\n    const handleProcessRow = (params) => {\n        var keyword = \"\"\n        if(params.keywords !== \"\" || params.keywords !== \"none\"){\n            keyword = params.keywords\n        }\n        const data = \"[ \\\"\" + keyword + \"\\\" ]\";\n        console.log(params)\n        var url = '/Marti/api/sync/metadata/' + params.hash + '/keywords' \n        console.log(url)\n        fetch(url, { \n            method: 'PUT',\n            headers: {'Content-Type':'application/json'},\n            body: data\n        }).then((function (res) {\n            if(!res.ok){\n                setSomethingDeleted(!deleted);\n                console.log(res);\n            }\n        }));\n        return(params);\n      };\n\n\n    // Dropzone state management\n    const [fileProp, setFileProp] = React.useState(\"\");\n    const {getRootProps, getInputProps, open} = useDropzone({\n        // Note how this callback is never invoked if drop occurs on the inner dropzone\n        noClick: true,\n        onDrop: files => { \n            setFileProp(files[0]);\n            setUploadOpen(true);\n        }\n    });\n\n    // Only get missions once on page load since they cannot be changed on this page\n    useEffect(() => {\n        fetch('/Marti/api/missions')\n            .then(response => response.json())\n            .then(data => {\n                var missionList = [];\n                data.data.forEach(function (missionData) {\n                  missionList.push(missionData.name);\n                  allMissions.push(missionData.name);\n                  if (missionData.tool === \"vbm\"){\n                    copMissions.push(missionData.name);\n                  }\n                });\n                setMissions(missionList);\n            });\n      },[])\n\n    \n\n    useEffect(() => {\n        setLoading(true);\n        const pageSize = paginationModel.pageSize\n        const url = '/Marti/api/files/metadata?' + filter + '&page=' \n        + page + '&limit=' + pageSize + sort + nameMatch\n        // Grab the page first since we start on page 0\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                var rows = [];\n                data.data.forEach(function (rowData, i) {\n                    var row = {\n                        id: (page * pageSize)  + i, \n                        hash: rowData.Hash,\n                        name: rowData.Name,\n                        submitter: rowData.User,    \n                        keywords: rowData.Keywords,\n                        groups: rowData.Groups,\n                        size: rowData.Size,\n                        updateTime: rowData.Time,\n                        type: rowData.MimeType,\n                        expiration: rowData.Expiration,\n                        actions: 'Delete'\n                    }\n                    rows.push(row);\n                });\n                setRows(rows);\n                setLoading(false);\n            });\n        // Get the row count for page indexing\n        fetch('/Marti/api/files/metadata/count?' + filter)\n            .then(response => response.json())\n            .then(data => {\n                setRowCount(data.data);\n            });\n        \n    }, [page, deleted, paginationModel, sort, filter, nameMatch]);\n\n    const stringOperators = getGridStringOperators().filter((op => ['contains'].includes(op.value)));\n\n    // Render definition for Data Grid\n    const columns = [\n        { field: 'id', headerName: 'ID', width: 1 },\n        { field: 'hash', headerName: 'hash', width: 1 },\n        { field: 'name', headerName: 'Name', width: 330, filterOperators: stringOperators,\n        renderCell: (params) => {\n            return (\n                <div>\n                    <Button href={'api/files/'+ params.row.hash} \n                    onClick={ (e) => {e.stopPropagation();}}\n                    startIcon={<DownloadIcon />} aria-label=\"Download\" style={{textTransform: 'none'}}>\n                    {params.value}\n                    </Button>\n                    \n                </div>\n            );\n          } },\n        { field: 'submitter', headerName: 'Submitter', width: 150, sortable: false, filterable: false },\n        { field: 'keywords', headerName: 'Keywords', width: 250, sortable: false, editable: true, filterable: false,\n        cellClassName: 'KeywordsCell',\n        renderCell: (params) => {\n            return (\n                <>\n                {params.value.length > 25 ? \n                    <>\n                    {params.value.substring(0,25) + \"...\"}\n                    <IconButton\n                    //apiRef.current.setCellMode(params.id, params.field, 'edit')\n                    onClick={() => { \n                        setCellModesModel({\n                            ...cellModesModel,\n                            [params.id]: { ...cellModesModel[params.id], [params.field]: { mode: GridCellModes.Edit } },\n                        });\n                    }}>\n                        <EditIcon />\n                    </IconButton>\n                </>\n                :\n                <>\n                    {params.value} \n                    <IconButton\n                    //apiRef.current.setCellMode(params.id, params.field, 'edit')\n                    onClick={() => { \n                        setCellModesModel({\n                            ...cellModesModel,\n                            [params.id]: { ...cellModesModel[params.id], [params.field]: { mode: GridCellModes.Edit } },\n                        });\n                    }}>\n                        <EditIcon />\n                    </IconButton>\n                    </>\n                    \n                }\n                </>\n            ) \n        }},\n        { field: 'groups', headerName: 'Groups', width: 150, sortable: false, filterable: false },\n        { field: 'size', headerName: 'Size (Approx)', width: 120, filterable: false },\n        { field: 'updateTime', headerName: 'Update Time', width: 180, filterable: false,\n        renderCell: (params) => {\n            return (\n                <TextField variant=\"standard\"\n                value={moment(params.value).format(\"YYYY-MM-DDThh:mm\")}\n                InputProps={{\n                    disableUnderline: true,\n                  }}\n                />\n            ) }\n        },\n        { field: 'type', headerName: 'Type', width: 200, sortable: false, filterable: false },\n        { field: 'expiration', headerName: 'Expiration', width: 300, sortable: false, filterable: false,\n        renderCell: (params) => {\n            return (\n                <TextField\n                    id=\"datetime-local\"\n                    type=\"datetime-local\"\n                    defaultValue={moment(params.value).format('YYYY-MM-DDThh:mm')}\n                    onClick={ (e) => {e.stopPropagation();}}\n                    onChange={(e) => {\n                        setExpiration(params.row.hash, moment.utc(e.target.value).unix())\n                    }}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />  \n            );\n          }\n        },\n        { field: 'actions', headerName: 'Actions', width: 150, sortable: false, filterable: false,\n        renderCell: (params) => {\n            return (\n                <DeleteButton setOpen={setDeleteOpen} row={params.row} \n                setRow={setRow} value={params.value} />\n        );\n        }}\n        \n    ];\n\n    //Used for setting expiration\n    function setExpiration(hash,newDate){\n        var date;\n        if(isNaN(newDate)){\n            date = -1\n        } else{\n            date = newDate\n        }\n        var url = '/Marti/api/sync/metadata/' + hash + \"/expiration?expiration=\" + date\n        fetch(url, { method: 'PUT' })\n            .then(() => {\n                setSomethingDeleted(!deleted);\n            });\n    }\n\n    // Used in Dialog\n    const handleClose = () => {\n        setDeleteOpen(false);\n        setMultiDeleteOpen(false);\n        setRow(emptyRow);\n    };\n\n    // Delete functions for row button and toolbar button\n    function deleteFile(){\n        var url = '/Marti/api/files/' + rowToDelete.hash\n        fetch(url, { method: 'DELETE' })\n            .then(() => {\n                setSomethingDeleted(!deleted);\n                handleClose();\n            });\n    }\n\n    function deleteSelectedFiles(){\n        var urls = [];\n        rowsSelected.forEach(function (rowData) {\n            var url = '/Marti/api/files/' + rowData.hash\n            urls.push(url);\n        })\n        Promise.all(urls.map(url =>\n            fetch(url, { method: 'DELETE' }).then()\n        )).then(() => {\n            setSomethingDeleted(!deleted);\n            handleClose();\n        })\n    }\n      \n\n    return (\n        <div {...getRootProps({className: 'dropzone'})} >\n        <header className=\"DataTable\">\n        <DataGrid\n            rows={rows}\n            sx={{'.MuiDataGrid-cell--textLeft':{\n                    justifyContent: 'space-between'\n                 },\n                 '.MuiDataGrid-overlayWrapper':{\n                    zIndex: 0\n                 }\n            }}\n            columns={columns}\n            columnVisibilityModel={{\n                id: false,\n                hash: false\n            }}\n            pagination\n            //autoPageSize\n            checkboxSelection\n            /*onPageSizeChange={(newPageSize) => {\n                console.log(\"New page size: \"+newPageSize)\n                setPageSize(newPageSize)\n            }}*/\n            pageSizeOptions={[12, 25, 50, 100]}\n            page={page}\n            onPageChange={(newPage) => setPage(newPage)}\n            rowCount={rowCount}\n            paginationMode=\"server\"\n            paginationModel={paginationModel}\n            onPaginationModelChange={(pgModel) => {\n                setPaginationModel(pgModel)\n                setPage(pgModel.page)\n                }\n            }\n            onRowSelectionModelChange={(ids) => {\n                const selectedRowData = ids.map((id) => \n                    rows.find((row) => row.id === id\n                ));\n                console.log(selectedRowData)\n                setRowsSelected(selectedRowData);\n            }}\n            components={{\n                Toolbar: FileManagerToolbar,\n                Pagination: CustomPagination,\n                noRowsOverlay: CustomNoRowsOverlay,\n                NoResultsOverlay: CustomNoRowsOverlay,\n            }}\n            componentsProps={{ \n              toolbar: {rowsSelected, setMultiDeleteOpen, open, setFilter, \n                filterPackage, setFilterPackage,missions, setMissions, mission, \n                setMission, copChecked, setCopChecked, setNameMatch}}}\n            rowsSelected={rowsSelected}\n            setMultiDeleteOpen={setMultiDeleteOpen}\n            filterMode=\"server\"\n            onFilterModelChange={handleFilterModelChange}\n            setSomethingDeleted={setSomethingDeleted}\n            deleted={deleted}\n            loading={loading}\n            sortingMode=\"server\"\n            onSortModelChange={handleSortModelChange}\n            disableSelectionOnClick\n            cellModesModel={cellModesModel}\n            onCellModesModelChange={(model) => setCellModesModel(model)}\n            experimentalFeatures={{ newEditingApi: true }}\n            processRowUpdate={handleProcessRow}\n            onProcessRowUpdateError={() => {}}\n            />\n        </header>\n        <UploadFile openHook={uploadOpen} setOpenHook={setUploadOpen}\n                    deleted={deleted} setDeleted={setSomethingDeleted}\n                    fileProp={fileProp} setFileProp={setFileProp}/>\n        <Dialog open={deleteOpen} onClose={handleClose} >\n            <DialogTitle id=\"alert-dialog-title\">\n            {\"Delete File \" + rowToDelete.name + \"?\"}\n            </DialogTitle>\n            <DialogContent>\n            <DialogContentText>\n                This file will be removed from the database\n            </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button onClick={deleteFile} autoFocus>\n                Delete\n            </Button>\n            </DialogActions>\n        </Dialog>\n        <Dialog open={multiDeleteOpen} onClose={handleClose}>\n            <DialogTitle id=\"alert-dialog-title\">\n            {\"Delete \" + rowsSelected.length + \" Files ?\"}\n            </DialogTitle>\n            <DialogContent>\n            <DialogContentText>\n                The selected files will be removed from the database\n            </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button onClick={deleteSelectedFiles} autoFocus>\n                Delete\n            </Button>\n            </DialogActions>\n        </Dialog>\n        <Footer />\n        </div>\n    );\n}\n\nexport default FileManager;","/home/radu/Server/src/takserver-tool-ui/src/SendInviteMission.js",["69","70"],[],"import React, { useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Box from '@mui/material/Box';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Chip from '@mui/material/Chip';\n\n// Constants to use throughout the component\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 350,\n    },\n  },\n};\n\n// Structures for missions\nvar allMissions = [];\nvar copMissions = [];\n\nfunction SendInviteMission({openHook, setOpenHook, sendBool, missionSelected}) {\n  // Hooks\n    const [contacts, setContacts] = React.useState([]);\n    const [checked, setChecked] = React.useState([]);\n\n    useEffect(() => {\n      fetch('/Marti/api/contacts/all')\n      .then(response => response.json())\n      .then(data => {\n          var contactsArray = []\n          data.forEach(function (rowData) {\n            if (rowData.uid !== \"\"){\n              var struct = {\n                name: rowData.callsign,\n                uid: rowData.uid\n              }\n              contactsArray.push(struct);\n            }\n          })\n          setContacts(contactsArray);\n      });\n      setChecked([]);\n    },[openHook])\n\n    const handleContacts = (event) => {\n      const {\n        target: { value },\n      } = event;\n      setChecked(\n        // On autofill we get a stringified value.\n        typeof value === 'string' ? value.split(',') : value,\n      );\n    };\n  \n\n    const sendOrInviteMission = () => {\n      var url = \"\"\n      if(sendBool){\n        url = \"/Marti/api/missions/\" + missionSelected[0].name + \"/send\"\n      } else {\n        url = \"/Marti/api/missions/\" + missionSelected[0].name + \"/invite\"\n      }\n\n      var formBody = [];\n      checked.forEach(function (arrayItem) {\n        formBody.push(\"contacts=\" + arrayItem.uid)\n      })\n      formBody = formBody.join(\"&\");\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        },\n        body: formBody\n      }).then(function (res) {\n        if (res.ok) {setOpenHook(false)}\n      })\n    }\n\n    return(\n    <Dialog open={openHook}\n        fullWidth\n        maxWidth=\"sm\">\n        <DialogContent>\n        <DialogTitle sx={{pl: 0}}>{sendBool ? \"Send Mission Package\" : \"Send Mission Invite\"}</DialogTitle>\n          <DialogContent>{missionSelected.length > 0  ? \"Mission Name: \" + missionSelected[0].name : \"\"} </DialogContent>\n        \n          <DialogTitle sx={{pl: 0}}>Send Mission To</DialogTitle>\n          \n            <div>\n            <Select style={{width: 350}}\n              labelId=\"mission-chip-label\"\n              id=\"mission-multiple-chip\"\n              multiple\n              value={checked}\n              onChange={handleContacts}\n              input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value.name} label={value.name} />\n                  ))}\n                </Box>\n              )}\n              MenuProps={MenuProps}\n            >\n              {contacts.map((contact) => (\n                <MenuItem\n                  key={contact.name}\n                  value={contact}\n                >\n                  {contact.name}\n                </MenuItem>\n              ))}\n            </Select>\n            </div>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={() => {setOpenHook(false)}}>Close</Button>\n          <Button onClick={sendOrInviteMission} >Send</Button>\n        </DialogActions>\n    </Dialog>\n    );\n}\n\nexport default SendInviteMission;","/home/radu/Server/src/takserver-tool-ui/src/UploadFile.js",[],[],"/home/radu/Server/src/takserver-tool-ui/src/Footer.js",[],[],"/home/radu/Server/src/takserver-tool-ui/src/TranferList.js",["71"],[],"import React, { useEffect } from 'react';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport Checkbox from '@mui/material/Checkbox';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport AirIcon from '@mui/icons-material/Air';\nimport PowerIcon from '@mui/icons-material/Power';\nimport GroupIcon from '@mui/icons-material/Group';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport { createTheme } from '@mui/material/styles';\nimport grey from '@mui/material/colors/grey';\n\nfunction not(a, b) {\n  return a.filter((value) => b.indexOf(value) === -1);\n}\n\nfunction intersection(a, b) {\n  return a.filter((value) => b.indexOf(value) !== -1);\n}\n\nfunction union(a, b) {\n  return [...a, ...not(b, a)];\n}\n\n//const available = [{id: 0, type:'stream'},{id: 1, type:'predicate'},{id: 2, type:'plugin'},{id: 3, type:'federate'},\n//{id: 4, type:'federate'}]\n\nexport default function TransferList({available, selected, setSelected, resetList}) {\n\n\n  const theme = createTheme({\n  palette: {\n      primary: {\n          main: grey[900],\n      }\n  },\n  });\n  const [checked, setChecked] = React.useState([]);\n  const [left, setLeft] = React.useState(not(available, selected));\n  const [streamVariant, setStreamVariant] = React.useState(\"outlined\");\n  const [predicateVariant, setPredicateVariant] = React.useState(\"outlined\");\n  const [pluginVariant, setPluginVariant] = React.useState(\"outlined\");\n  const [federateVariant, setFederateVariant] = React.useState(\"outlined\");\n  const [filter, setFilter]  = React.useState(\"\");\n  const leftChecked = intersection(checked, left);\n  const rightChecked = intersection(checked, selected);\n  const [resetLeft, setResetLeft] = React.useState(not(available, selected));\n\n  useEffect(() => {\n    console.log(selected)\n    handleDataFeedChange()\n  },[resetList])\n\n  function handleFilter(type){\n    setStreamVariant(\"outlined\")\n    setPredicateVariant(\"outlined\")\n    setPluginVariant(\"outlined\")\n    setFederateVariant(\"outlined\")\n    if(type === 'Streaming' && filter !== \"Streaming\"){\n      setStreamVariant(\"contained\")\n      setLeft(resetLeft.filter(function(el){return el.type === 'Streaming'}))\n      setFilter(\"Streaming\")\n    }\n    else if(type === 'Streaming'){\n      setLeft(resetLeft);\n      setFilter(\"\");\n    }\n    if(type === 'Predicate' && filter !== \"Predicate\"){\n      setPredicateVariant(\"contained\")\n      setLeft(resetLeft.filter(function(el){return el.type === 'Predicate'}))\n      setFilter(\"Predicate\")\n    }\n    else if(type === 'Predicate'){\n      setLeft(resetLeft);\n      setFilter(\"\");\n    }\n    if(type === 'Plugin' && filter !== \"Plugin\"){\n      setPluginVariant(\"contained\")\n      setLeft(resetLeft.filter(function(el){return el.type === 'Plugin'}))\n      setFilter(\"Plugin\")\n    }\n    else if(type === 'Plugin'){\n      setLeft(resetLeft);\n      setFilter(\"\");\n    }\n    if(type === 'Federate' && filter !== \"Federate\"){\n      setFederateVariant(\"contained\")\n      setLeft(resetLeft.filter(function(el){return el.type === 'Federate'}))\n      setFilter(\"Federate\")\n    }\n    else if(type === 'Federate'){\n      setLeft(resetLeft);\n      setFilter(\"\");\n    }\n  }\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const numberOfChecked = (items) => intersection(checked, items).length;\n\n  const handleToggleAll = (items) => () => {\n    if (numberOfChecked(items) === items.length) {\n      setChecked(not(checked, items));\n    } else {\n      setChecked(union(checked, items));\n    }\n  };\n\n  const handleCheckedRight = () => {\n    setSelected(selected.concat(leftChecked));\n    setLeft(not(left, leftChecked));\n    setResetLeft(not(resetLeft, leftChecked));\n    setChecked(not(checked, leftChecked));\n  };\n\n  const handleCheckedLeft = () => {\n    setLeft(left.concat(rightChecked));\n    setResetLeft(resetLeft.concat(rightChecked));\n    if(filter !== \"\"){\n      // extra concat is needed set the hook set as aync and we can't count on it being updated in time\n      setLeft(resetLeft.concat(rightChecked).filter(function(el){return el.type === filter}))\n    } \n    setSelected(not(selected, rightChecked));\n    setChecked(not(checked, rightChecked));\n  };\n\n  function handleDataFeedChange(){\n    setLeft(not(available, selected));\n    setResetLeft(not(available, selected));\n    setChecked([]);\n  };\n\n  const customList = (title, items) => (\n    <Card>\n      <CardHeader\n        sx={{ px: 2, py: 1 }}\n        avatar={\n          <Checkbox\n            onClick={handleToggleAll(items)}\n            checked={numberOfChecked(items) === items.length && items.length !== 0}\n            indeterminate={\n              numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\n            }\n            disabled={items.length === 0}\n            inputProps={{\n              'aria-label': 'all items selected',\n            }}\n          />\n        }\n        title={title}\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\n      />\n      <Divider />\n      <List\n        sx={{\n          width: 200,\n          height: 530,\n          bgcolor: 'background.paper',\n          overflow: 'auto',\n        }}\n        dense\n        component=\"div\"\n        role=\"list\"\n      >\n        {items.map((value) => {\n          if(value === undefined) {return (<></>)}\n          const labelId = `transfer-list-all-item-${value.name}-label`;\n          return (\n            <ListItem\n              key={value.id}\n              role=\"listitem\"\n              button\n              onClick={handleToggle(value)}\n            >\n              <ListItemIcon>\n                <Checkbox\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{\n                    'aria-labelledby': labelId,\n                  }}\n                />\n                {value.type === 'Streaming' ? <AirIcon sx={{mt:1, mr:0.5}}/> : <></>}\n                {value.type === 'Predicate' ? <DataObjectIcon sx={{mt:1, mr:0.5}}/> : <></>}\n                {value.type === 'Plugin' ? <PowerIcon sx={{mt:1, mr:0.5}}/> : <></>}\n                {value.type === 'Federate' ? <GroupIcon sx={{mt:1, mr:0.5}}/> : <></>}\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={`${value.name}`} />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Card>\n  );\n\n  return (\n    <>\n     <Typography sx={{pl:5}} variant=\"h5\">Filter Available Feeds:</Typography>\n     <Button sx={{ml:5}} className=\"Toolbar\" \n     color='primary' theme={theme}  onClick={() => {handleFilter(\"Streaming\")}} variant={streamVariant}\n     startIcon={<AirIcon />}>Stream</Button>\n     <Button sx={{ml:1, mr: 13}} className=\"Toolbar\" \n     color='primary' theme={theme} onClick={() => {handleFilter(\"Predicate\")}} variant={predicateVariant}\n      startIcon={<DataObjectIcon />}>Predicate</Button>\n     <Button sx={{ml:5, mt: 2}} className=\"Toolbar\" \n     color='primary' theme={theme} onClick={() => {handleFilter(\"Plugin\")}} variant={pluginVariant}\n      startIcon={<PowerIcon />}>Plugin</Button>\n     <Button sx={{ml:2, mt: 2}} className=\"Toolbar\" \n     color='primary' theme={theme} onClick={() => {handleFilter(\"Federate\")}} variant={federateVariant}\n      startIcon={<GroupIcon />}>Federate</Button>\n    <Grid sx={{marginTop:1}} container spacing={2} justifyContent=\"center\" alignItems=\"center\">\n      <Grid item>{customList('Available', left)}</Grid>\n      <Grid item>\n        <Grid container direction=\"column\" alignItems=\"center\">\n          <Button\n            sx={{ my: 0.5 }}\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={handleCheckedRight}\n            disabled={leftChecked.length === 0}\n            aria-label=\"move selected right\"\n          >\n            &gt;\n          </Button>\n          <Button\n            sx={{ my: 0.5 }}\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={handleCheckedLeft}\n            disabled={rightChecked.length === 0}\n            aria-label=\"move selected left\"\n          >\n            &lt;\n          </Button>\n        </Grid>\n      </Grid>\n      <Grid item>{customList('Current', selected)}</Grid>\n    </Grid>\n    </>\n  );\n}",{"ruleId":"72","severity":1,"message":"73","line":4,"column":28,"nodeType":"74","messageId":"75","endLine":4,"endColumn":34},{"ruleId":"72","severity":1,"message":"76","line":10,"column":36,"nodeType":"74","messageId":"75","endLine":10,"endColumn":50},{"ruleId":"72","severity":1,"message":"77","line":17,"column":18,"nodeType":"74","messageId":"75","endLine":17,"endColumn":28},{"ruleId":"72","severity":1,"message":"78","line":45,"column":8,"nodeType":"74","messageId":"75","endLine":45,"endColumn":22},{"ruleId":"72","severity":1,"message":"79","line":51,"column":10,"nodeType":"74","messageId":"75","endLine":51,"endColumn":26},{"ruleId":"72","severity":1,"message":"80","line":69,"column":7,"nodeType":"74","messageId":"75","endLine":69,"endColumn":15},{"ruleId":"72","severity":1,"message":"81","line":81,"column":10,"nodeType":"74","messageId":"75","endLine":81,"endColumn":13},{"ruleId":"72","severity":1,"message":"82","line":177,"column":7,"nodeType":"74","messageId":"75","endLine":177,"endColumn":13},{"ruleId":"72","severity":1,"message":"83","line":193,"column":7,"nodeType":"74","messageId":"75","endLine":193,"endColumn":19},{"ruleId":"72","severity":1,"message":"84","line":306,"column":5,"nodeType":"74","messageId":"75","endLine":306,"endColumn":16},{"ruleId":"72","severity":1,"message":"85","line":307,"column":5,"nodeType":"74","messageId":"75","endLine":307,"endColumn":16},{"ruleId":"72","severity":1,"message":"86","line":322,"column":10,"nodeType":"74","messageId":"75","endLine":322,"endColumn":13},{"ruleId":"72","severity":1,"message":"87","line":322,"column":15,"nodeType":"74","messageId":"75","endLine":322,"endColumn":21},{"ruleId":"72","severity":1,"message":"88","line":324,"column":10,"nodeType":"74","messageId":"75","endLine":324,"endColumn":17},{"ruleId":"72","severity":1,"message":"89","line":324,"column":19,"nodeType":"74","messageId":"75","endLine":324,"endColumn":29},{"ruleId":"72","severity":1,"message":"90","line":333,"column":10,"nodeType":"74","messageId":"75","endLine":333,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":606,"column":9,"nodeType":"93","endLine":606,"endColumn":62,"suggestions":"94"},{"ruleId":"72","severity":1,"message":"95","line":699,"column":13,"nodeType":"74","messageId":"75","endLine":699,"endColumn":18},{"ruleId":"96","severity":1,"message":"97","line":861,"column":35,"nodeType":"98","messageId":"99","endLine":861,"endColumn":37},{"ruleId":"96","severity":1,"message":"97","line":879,"column":38,"nodeType":"98","messageId":"99","endLine":879,"endColumn":40},{"ruleId":"100","severity":1,"message":"101","line":904,"column":15,"nodeType":"74","messageId":"102","endLine":904,"endColumn":18},{"ruleId":"91","severity":1,"message":"103","line":111,"column":8,"nodeType":"93","endLine":111,"endColumn":20,"suggestions":"104"},{"ruleId":"72","severity":1,"message":"105","line":347,"column":26,"nodeType":"74","messageId":"75","endLine":347,"endColumn":39},{"ruleId":"72","severity":1,"message":"84","line":26,"column":5,"nodeType":"74","messageId":"75","endLine":26,"endColumn":16},{"ruleId":"72","severity":1,"message":"85","line":27,"column":5,"nodeType":"74","messageId":"75","endLine":27,"endColumn":16},{"ruleId":"91","severity":1,"message":"106","line":59,"column":5,"nodeType":"93","endLine":59,"endColumn":16,"suggestions":"107"},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'MuiAppBarProps' is defined but never used.","'IconButton' is defined but never used.","'DataObjectIcon' is defined but never used.","'SubscriptRounded' is defined but never used.","'emptyRow' is assigned a value but never used.","'not' is defined but never used.","'AppBar' is assigned a value but never used.","'DrawerHeader' is assigned a value but never used.","'allMissions' is assigned a value but never used.","'copMissions' is assigned a value but never used.","'age' is assigned a value but never used.","'setAge' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'name', 'rowsSelected', and 'value'. Either include them or remove the dependency array.","ArrayExpression",["108"],"'theme' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'url' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'onPageChange'. Either include it or remove the dependency array. If 'onPageChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["109"],"'getInputProps' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleDataFeedChange' and 'selected'. Either include them or remove the dependency array.",["110"],{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [page, paginationModel, missionChanged, sort, filter, rowsSelected, value, name]",{"range":"117","text":"118"},"Update the dependencies array to be: [onPageChange, searchPage]",{"range":"119","text":"120"},"Update the dependencies array to be: [handleDataFeedChange, resetList, selected]",{"range":"121","text":"122"},[22521,22574],"[page, paginationModel, missionChanged, sort, filter, rowsSelected, value, name]",[3822,3834],"[onPageChange, searchPage]",[2160,2171],"[handleDataFeedChange, resetList, selected]"]