/*
 * ISM Service
 * A service for normalizing the interaction with classification markings
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ism.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TSClassificationConfig
 */
@JsonPropertyOrder({
  TSClassificationConfig.JSON_PROPERTY_ACTIVE,
  TSClassificationConfig.JSON_PROPERTY_NATO,
  TSClassificationConfig.JSON_PROPERTY_BL,
  TSClassificationConfig.JSON_PROPERTY_PM
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T21:49:37.751722524-05:00[America/Chicago]")
public class TSClassificationConfig {
  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_NATO = "nato";
  private Boolean nato;

  /**
   * Banner line version
   */
  public enum BlEnum {
    TOP_SECRET("TOP SECRET");

    private String value;

    BlEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BlEnum fromValue(String value) {
      for (BlEnum b : BlEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BL = "bl";
  private BlEnum bl;

  /**
   * Portion mark version
   */
  public enum PmEnum {
    TS("TS");

    private String value;

    PmEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PmEnum fromValue(String value) {
      for (PmEnum b : PmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PM = "pm";
  private PmEnum pm;

  public TSClassificationConfig() {
  }

  public TSClassificationConfig active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Allows configuration to be defined but not applied
   * @return active
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public TSClassificationConfig nato(Boolean nato) {
    
    this.nato = nato;
    return this;
  }

   /**
   * Are NATO markings available at this classification level
   * @return nato
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NATO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getNato() {
    return nato;
  }


  @JsonProperty(JSON_PROPERTY_NATO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNato(Boolean nato) {
    this.nato = nato;
  }


  public TSClassificationConfig bl(BlEnum bl) {
    
    this.bl = bl;
    return this;
  }

   /**
   * Banner line version
   * @return bl
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BlEnum getBl() {
    return bl;
  }


  @JsonProperty(JSON_PROPERTY_BL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBl(BlEnum bl) {
    this.bl = bl;
  }


  public TSClassificationConfig pm(PmEnum pm) {
    
    this.pm = pm;
    return this;
  }

   /**
   * Portion mark version
   * @return pm
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PmEnum getPm() {
    return pm;
  }


  @JsonProperty(JSON_PROPERTY_PM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPm(PmEnum pm) {
    this.pm = pm;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TSClassificationConfig tsClassificationConfig = (TSClassificationConfig) o;
    return Objects.equals(this.active, tsClassificationConfig.active) &&
        Objects.equals(this.nato, tsClassificationConfig.nato) &&
        Objects.equals(this.bl, tsClassificationConfig.bl) &&
        Objects.equals(this.pm, tsClassificationConfig.pm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, nato, bl, pm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TSClassificationConfig {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    nato: ").append(toIndentedString(nato)).append("\n");
    sb.append("    bl: ").append(toIndentedString(bl)).append("\n");
    sb.append("    pm: ").append(toIndentedString(pm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

