/*
 * ISM Service
 * A service for normalizing the interaction with classification markings
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ism.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Deserialized marking from rolling up portion marks
 */
@JsonPropertyOrder({
  MarkingResponseData.JSON_PROPERTY_CLASSIFICATION,
  MarkingResponseData.JSON_PROPERTY_SCICONTROLS,
  MarkingResponseData.JSON_PROPERTY_DISSEMINATIONCONTROLS,
  MarkingResponseData.JSON_PROPERTY_RELEASABLETO,
  MarkingResponseData.JSON_PROPERTY_PROGRAMNICKNAMES,
  MarkingResponseData.JSON_PROPERTY_NONICMARKINGS,
  MarkingResponseData.JSON_PROPERTY_FGISOURCEOPEN,
  MarkingResponseData.JSON_PROPERTY_FGISOURCEPROTECTED,
  MarkingResponseData.JSON_PROPERTY_OWNERPRODUCER
})
@JsonTypeName("MarkingResponse_data")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T21:49:37.751722524-05:00[America/Chicago]")
public class MarkingResponseData {
  public static final String JSON_PROPERTY_CLASSIFICATION = "classification";
  private List<String> classification = new ArrayList<>();

  public static final String JSON_PROPERTY_SCICONTROLS = "scicontrols";
  private List<String> scicontrols;

  public static final String JSON_PROPERTY_DISSEMINATIONCONTROLS = "disseminationcontrols";
  private List<String> disseminationcontrols;

  public static final String JSON_PROPERTY_RELEASABLETO = "releasableto";
  private List<String> releasableto;

  public static final String JSON_PROPERTY_PROGRAMNICKNAMES = "programnicknames";
  private List<String> programnicknames;

  public static final String JSON_PROPERTY_NONICMARKINGS = "nonicmarkings";
  private List<String> nonicmarkings;

  public static final String JSON_PROPERTY_FGISOURCEOPEN = "fgisourceopen";
  private List<String> fgisourceopen;

  public static final String JSON_PROPERTY_FGISOURCEPROTECTED = "fgisourceprotected";
  private List<String> fgisourceprotected;

  public static final String JSON_PROPERTY_OWNERPRODUCER = "ownerproducer";
  private List<String> ownerproducer = new ArrayList<>();

  public MarkingResponseData() {
  }

  public MarkingResponseData classification(List<String> classification) {
    
    this.classification = classification;
    return this;
  }

  public MarkingResponseData addClassificationItem(String classificationItem) {
    if (this.classification == null) {
      this.classification = new ArrayList<>();
    }
    this.classification.add(classificationItem);
    return this;
  }

   /**
   * Get classification
   * @return classification
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLASSIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getClassification() {
    return classification;
  }


  @JsonProperty(JSON_PROPERTY_CLASSIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClassification(List<String> classification) {
    this.classification = classification;
  }


  public MarkingResponseData scicontrols(List<String> scicontrols) {
    
    this.scicontrols = scicontrols;
    return this;
  }

  public MarkingResponseData addScicontrolsItem(String scicontrolsItem) {
    if (this.scicontrols == null) {
      this.scicontrols = new ArrayList<>();
    }
    this.scicontrols.add(scicontrolsItem);
    return this;
  }

   /**
   * Get scicontrols
   * @return scicontrols
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCICONTROLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getScicontrols() {
    return scicontrols;
  }


  @JsonProperty(JSON_PROPERTY_SCICONTROLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScicontrols(List<String> scicontrols) {
    this.scicontrols = scicontrols;
  }


  public MarkingResponseData disseminationcontrols(List<String> disseminationcontrols) {
    
    this.disseminationcontrols = disseminationcontrols;
    return this;
  }

  public MarkingResponseData addDisseminationcontrolsItem(String disseminationcontrolsItem) {
    if (this.disseminationcontrols == null) {
      this.disseminationcontrols = new ArrayList<>();
    }
    this.disseminationcontrols.add(disseminationcontrolsItem);
    return this;
  }

   /**
   * Get disseminationcontrols
   * @return disseminationcontrols
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISSEMINATIONCONTROLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDisseminationcontrols() {
    return disseminationcontrols;
  }


  @JsonProperty(JSON_PROPERTY_DISSEMINATIONCONTROLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisseminationcontrols(List<String> disseminationcontrols) {
    this.disseminationcontrols = disseminationcontrols;
  }


  public MarkingResponseData releasableto(List<String> releasableto) {
    
    this.releasableto = releasableto;
    return this;
  }

  public MarkingResponseData addReleasabletoItem(String releasabletoItem) {
    if (this.releasableto == null) {
      this.releasableto = new ArrayList<>();
    }
    this.releasableto.add(releasabletoItem);
    return this;
  }

   /**
   * Get releasableto
   * @return releasableto
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELEASABLETO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getReleasableto() {
    return releasableto;
  }


  @JsonProperty(JSON_PROPERTY_RELEASABLETO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReleasableto(List<String> releasableto) {
    this.releasableto = releasableto;
  }


  public MarkingResponseData programnicknames(List<String> programnicknames) {
    
    this.programnicknames = programnicknames;
    return this;
  }

  public MarkingResponseData addProgramnicknamesItem(String programnicknamesItem) {
    if (this.programnicknames == null) {
      this.programnicknames = new ArrayList<>();
    }
    this.programnicknames.add(programnicknamesItem);
    return this;
  }

   /**
   * Get programnicknames
   * @return programnicknames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROGRAMNICKNAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getProgramnicknames() {
    return programnicknames;
  }


  @JsonProperty(JSON_PROPERTY_PROGRAMNICKNAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProgramnicknames(List<String> programnicknames) {
    this.programnicknames = programnicknames;
  }


  public MarkingResponseData nonicmarkings(List<String> nonicmarkings) {
    
    this.nonicmarkings = nonicmarkings;
    return this;
  }

  public MarkingResponseData addNonicmarkingsItem(String nonicmarkingsItem) {
    if (this.nonicmarkings == null) {
      this.nonicmarkings = new ArrayList<>();
    }
    this.nonicmarkings.add(nonicmarkingsItem);
    return this;
  }

   /**
   * Get nonicmarkings
   * @return nonicmarkings
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NONICMARKINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getNonicmarkings() {
    return nonicmarkings;
  }


  @JsonProperty(JSON_PROPERTY_NONICMARKINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNonicmarkings(List<String> nonicmarkings) {
    this.nonicmarkings = nonicmarkings;
  }


  public MarkingResponseData fgisourceopen(List<String> fgisourceopen) {
    
    this.fgisourceopen = fgisourceopen;
    return this;
  }

  public MarkingResponseData addFgisourceopenItem(String fgisourceopenItem) {
    if (this.fgisourceopen == null) {
      this.fgisourceopen = new ArrayList<>();
    }
    this.fgisourceopen.add(fgisourceopenItem);
    return this;
  }

   /**
   * Get fgisourceopen
   * @return fgisourceopen
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FGISOURCEOPEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFgisourceopen() {
    return fgisourceopen;
  }


  @JsonProperty(JSON_PROPERTY_FGISOURCEOPEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFgisourceopen(List<String> fgisourceopen) {
    this.fgisourceopen = fgisourceopen;
  }


  public MarkingResponseData fgisourceprotected(List<String> fgisourceprotected) {
    
    this.fgisourceprotected = fgisourceprotected;
    return this;
  }

  public MarkingResponseData addFgisourceprotectedItem(String fgisourceprotectedItem) {
    if (this.fgisourceprotected == null) {
      this.fgisourceprotected = new ArrayList<>();
    }
    this.fgisourceprotected.add(fgisourceprotectedItem);
    return this;
  }

   /**
   * Get fgisourceprotected
   * @return fgisourceprotected
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FGISOURCEPROTECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFgisourceprotected() {
    return fgisourceprotected;
  }


  @JsonProperty(JSON_PROPERTY_FGISOURCEPROTECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFgisourceprotected(List<String> fgisourceprotected) {
    this.fgisourceprotected = fgisourceprotected;
  }


  public MarkingResponseData ownerproducer(List<String> ownerproducer) {
    
    this.ownerproducer = ownerproducer;
    return this;
  }

  public MarkingResponseData addOwnerproducerItem(String ownerproducerItem) {
    if (this.ownerproducer == null) {
      this.ownerproducer = new ArrayList<>();
    }
    this.ownerproducer.add(ownerproducerItem);
    return this;
  }

   /**
   * Get ownerproducer
   * @return ownerproducer
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OWNERPRODUCER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getOwnerproducer() {
    return ownerproducer;
  }


  @JsonProperty(JSON_PROPERTY_OWNERPRODUCER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerproducer(List<String> ownerproducer) {
    this.ownerproducer = ownerproducer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarkingResponseData markingResponseData = (MarkingResponseData) o;
    return Objects.equals(this.classification, markingResponseData.classification) &&
        Objects.equals(this.scicontrols, markingResponseData.scicontrols) &&
        Objects.equals(this.disseminationcontrols, markingResponseData.disseminationcontrols) &&
        Objects.equals(this.releasableto, markingResponseData.releasableto) &&
        Objects.equals(this.programnicknames, markingResponseData.programnicknames) &&
        Objects.equals(this.nonicmarkings, markingResponseData.nonicmarkings) &&
        Objects.equals(this.fgisourceopen, markingResponseData.fgisourceopen) &&
        Objects.equals(this.fgisourceprotected, markingResponseData.fgisourceprotected) &&
        Objects.equals(this.ownerproducer, markingResponseData.ownerproducer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classification, scicontrols, disseminationcontrols, releasableto, programnicknames, nonicmarkings, fgisourceopen, fgisourceprotected, ownerproducer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarkingResponseData {\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    scicontrols: ").append(toIndentedString(scicontrols)).append("\n");
    sb.append("    disseminationcontrols: ").append(toIndentedString(disseminationcontrols)).append("\n");
    sb.append("    releasableto: ").append(toIndentedString(releasableto)).append("\n");
    sb.append("    programnicknames: ").append(toIndentedString(programnicknames)).append("\n");
    sb.append("    nonicmarkings: ").append(toIndentedString(nonicmarkings)).append("\n");
    sb.append("    fgisourceopen: ").append(toIndentedString(fgisourceopen)).append("\n");
    sb.append("    fgisourceprotected: ").append(toIndentedString(fgisourceprotected)).append("\n");
    sb.append("    ownerproducer: ").append(toIndentedString(ownerproducer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

