/*
 * ISM Service
 * A service for normalizing the interaction with classification markings
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ism.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * User
 */
@JsonPropertyOrder({
  User.JSON_PROPERTY_COUNTRY,
  User.JSON_PROPERTY_ACCMS,
  User.JSON_PROPERTY_CLASSIFICATIONS,
  User.JSON_PROPERTY_SCI_CONTROLS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T21:49:37.751722524-05:00[America/Chicago]")
public class User {
  /**
   * 3-letter country code
   */
  public enum CountryEnum {
    USA("USA"),
    
    AUS("AUS"),
    
    CAN("CAN"),
    
    GBR("GBR"),
    
    NZL("NZL"),
    
    ABW("ABW"),
    
    AFG("AFG"),
    
    AGO("AGO"),
    
    AIA("AIA"),
    
    ALA("ALA"),
    
    ALB("ALB"),
    
    AND("AND"),
    
    ARE("ARE"),
    
    ARG("ARG"),
    
    ARM("ARM"),
    
    ASM("ASM"),
    
    ATA("ATA"),
    
    ATF("ATF"),
    
    ATG("ATG"),
    
    AUT("AUT"),
    
    AZE("AZE"),
    
    BDI("BDI"),
    
    BEL("BEL"),
    
    BEN("BEN"),
    
    BES("BES"),
    
    BFA("BFA"),
    
    BGD("BGD"),
    
    BGR("BGR"),
    
    BHR("BHR"),
    
    BHS("BHS"),
    
    BIH("BIH"),
    
    BLM("BLM"),
    
    BLR("BLR"),
    
    BLZ("BLZ"),
    
    BMU("BMU"),
    
    BOL("BOL"),
    
    BRA("BRA"),
    
    BRB("BRB"),
    
    BRN("BRN"),
    
    BTN("BTN"),
    
    BVT("BVT"),
    
    BWA("BWA"),
    
    CAF("CAF"),
    
    CCK("CCK"),
    
    CHE("CHE"),
    
    CHL("CHL"),
    
    CHN("CHN"),
    
    CIV("CIV"),
    
    CMR("CMR"),
    
    COD("COD"),
    
    COG("COG"),
    
    COK("COK"),
    
    COL("COL"),
    
    COM("COM"),
    
    CPV("CPV"),
    
    CRI("CRI"),
    
    CUB("CUB"),
    
    CUW("CUW"),
    
    CXR("CXR"),
    
    CYM("CYM"),
    
    CYP("CYP"),
    
    CZE("CZE"),
    
    DEU("DEU"),
    
    DJI("DJI"),
    
    DMA("DMA"),
    
    DNK("DNK"),
    
    DOM("DOM"),
    
    DZA("DZA"),
    
    ECU("ECU"),
    
    EGY("EGY"),
    
    ERI("ERI"),
    
    ESH("ESH"),
    
    ESP("ESP"),
    
    EST("EST"),
    
    ETH("ETH"),
    
    FIN("FIN"),
    
    FJI("FJI"),
    
    FLK("FLK"),
    
    FRA("FRA"),
    
    FRO("FRO"),
    
    FSM("FSM"),
    
    GAB("GAB"),
    
    GEO("GEO"),
    
    GGY("GGY"),
    
    GHA("GHA"),
    
    GIB("GIB"),
    
    GIN("GIN"),
    
    GLP("GLP"),
    
    GMB("GMB"),
    
    GNB("GNB"),
    
    GNQ("GNQ"),
    
    GRC("GRC"),
    
    GRD("GRD"),
    
    GRL("GRL"),
    
    GTM("GTM"),
    
    GUF("GUF"),
    
    GUM("GUM"),
    
    GUY("GUY"),
    
    HKG("HKG"),
    
    HMD("HMD"),
    
    HND("HND"),
    
    HRV("HRV"),
    
    HTI("HTI"),
    
    HUN("HUN"),
    
    IDN("IDN"),
    
    IMN("IMN"),
    
    IND("IND"),
    
    IOT("IOT"),
    
    IRL("IRL"),
    
    IRN("IRN"),
    
    IRQ("IRQ"),
    
    ISL("ISL"),
    
    ISR("ISR"),
    
    ITA("ITA"),
    
    JAM("JAM"),
    
    JEY("JEY"),
    
    JOR("JOR"),
    
    JPN("JPN"),
    
    KAZ("KAZ"),
    
    KEN("KEN"),
    
    KGZ("KGZ"),
    
    KHM("KHM"),
    
    KIR("KIR"),
    
    KNA("KNA"),
    
    KOR("KOR"),
    
    KWT("KWT"),
    
    LAO("LAO"),
    
    LBN("LBN"),
    
    LBR("LBR"),
    
    LBY("LBY"),
    
    LCA("LCA"),
    
    LIE("LIE"),
    
    LKA("LKA"),
    
    LSO("LSO"),
    
    LTU("LTU"),
    
    LUX("LUX"),
    
    LVA("LVA"),
    
    MAC("MAC"),
    
    MAF("MAF"),
    
    MAR("MAR"),
    
    MCO("MCO"),
    
    MDA("MDA"),
    
    MDG("MDG"),
    
    MDV("MDV"),
    
    MEX("MEX"),
    
    MHL("MHL"),
    
    MKD("MKD"),
    
    MLI("MLI"),
    
    MLT("MLT"),
    
    MMR("MMR"),
    
    MNE("MNE"),
    
    MNG("MNG"),
    
    MNP("MNP"),
    
    MOZ("MOZ"),
    
    MRT("MRT"),
    
    MSR("MSR"),
    
    MTQ("MTQ"),
    
    MUS("MUS"),
    
    MWI("MWI"),
    
    MYS("MYS"),
    
    MYT("MYT"),
    
    NAM("NAM"),
    
    NCL("NCL"),
    
    NER("NER"),
    
    NFK("NFK"),
    
    NGA("NGA"),
    
    NIC("NIC"),
    
    NIU("NIU"),
    
    NLD("NLD"),
    
    NOR("NOR"),
    
    NPL("NPL"),
    
    NRU("NRU"),
    
    OMN("OMN"),
    
    PAK("PAK"),
    
    PAN("PAN"),
    
    PCN("PCN"),
    
    PER("PER"),
    
    PHL("PHL"),
    
    PLW("PLW"),
    
    PNG("PNG"),
    
    POL("POL"),
    
    PRI("PRI"),
    
    PRK("PRK"),
    
    PRT("PRT"),
    
    PRY("PRY"),
    
    PSE("PSE"),
    
    PYF("PYF"),
    
    QAT("QAT"),
    
    REU("REU"),
    
    ROU("ROU"),
    
    RUS("RUS"),
    
    RWA("RWA"),
    
    SAU("SAU"),
    
    SDN("SDN"),
    
    SEN("SEN"),
    
    SGP("SGP"),
    
    SGS("SGS"),
    
    SHN("SHN"),
    
    SJM("SJM"),
    
    SLB("SLB"),
    
    SLE("SLE"),
    
    SLV("SLV"),
    
    SMR("SMR"),
    
    SOM("SOM"),
    
    SPM("SPM"),
    
    SRB("SRB"),
    
    SSD("SSD"),
    
    STP("STP"),
    
    SUR("SUR"),
    
    SVK("SVK"),
    
    SVN("SVN"),
    
    SWE("SWE"),
    
    SWZ("SWZ"),
    
    SXM("SXM"),
    
    SYC("SYC"),
    
    SYR("SYR"),
    
    TCA("TCA"),
    
    TCD("TCD"),
    
    TGO("TGO"),
    
    THA("THA"),
    
    TJK("TJK"),
    
    TKL("TKL"),
    
    TKM("TKM"),
    
    TLS("TLS"),
    
    TON("TON"),
    
    TTO("TTO"),
    
    TUN("TUN"),
    
    TUR("TUR"),
    
    TUV("TUV"),
    
    TWN("TWN"),
    
    TZA("TZA"),
    
    UGA("UGA"),
    
    UKR("UKR"),
    
    UMI("UMI"),
    
    URY("URY"),
    
    UZB("UZB"),
    
    VAT("VAT"),
    
    VCT("VCT"),
    
    VEN("VEN"),
    
    VGB("VGB"),
    
    VIR("VIR"),
    
    VNM("VNM"),
    
    VUT("VUT"),
    
    WLF("WLF"),
    
    WSM("WSM"),
    
    XKS("XKS"),
    
    YEM("YEM"),
    
    ZAF("ZAF"),
    
    ZMB("ZMB"),
    
    ZWE("ZWE");

    private String value;

    CountryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CountryEnum fromValue(String value) {
      for (CountryEnum b : CountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COUNTRY = "country";
  private CountryEnum country;

  public static final String JSON_PROPERTY_ACCMS = "accms";
  private List<String> accms = new ArrayList<>();

  /**
   * Gets or Sets classifications
   */
  public enum ClassificationsEnum {
    TS("TS"),
    
    S("S"),
    
    C("C"),
    
    R("R"),
    
    U("U");

    private String value;

    ClassificationsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ClassificationsEnum fromValue(String value) {
      for (ClassificationsEnum b : ClassificationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CLASSIFICATIONS = "classifications";
  private List<ClassificationsEnum> classifications = new ArrayList<>();

  /**
   * Gets or Sets sciControls
   */
  public enum SciControlsEnum {
    SIG("SIG"),
    
    SI("SI"),
    
    HCSP("HCSP"),
    
    TK("TK");

    private String value;

    SciControlsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SciControlsEnum fromValue(String value) {
      for (SciControlsEnum b : SciControlsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCI_CONTROLS = "sciControls";
  private List<SciControlsEnum> sciControls = new ArrayList<>();

  public User() {
  }

  public User country(CountryEnum country) {
    
    this.country = country;
    return this;
  }

   /**
   * 3-letter country code
   * @return country
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CountryEnum getCountry() {
    return country;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountry(CountryEnum country) {
    this.country = country;
  }


  public User accms(List<String> accms) {
    
    this.accms = accms;
    return this;
  }

  public User addAccmsItem(String accmsItem) {
    if (this.accms == null) {
      this.accms = new ArrayList<>();
    }
    this.accms.add(accmsItem);
    return this;
  }

   /**
   * ACCM nicknames accessible to user
   * @return accms
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getAccms() {
    return accms;
  }


  @JsonProperty(JSON_PROPERTY_ACCMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccms(List<String> accms) {
    this.accms = accms;
  }


  public User classifications(List<ClassificationsEnum> classifications) {
    
    this.classifications = classifications;
    return this;
  }

  public User addClassificationsItem(ClassificationsEnum classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Get classifications
   * @return classifications
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLASSIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ClassificationsEnum> getClassifications() {
    return classifications;
  }


  @JsonProperty(JSON_PROPERTY_CLASSIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClassifications(List<ClassificationsEnum> classifications) {
    this.classifications = classifications;
  }


  public User sciControls(List<SciControlsEnum> sciControls) {
    
    this.sciControls = sciControls;
    return this;
  }

  public User addSciControlsItem(SciControlsEnum sciControlsItem) {
    if (this.sciControls == null) {
      this.sciControls = new ArrayList<>();
    }
    this.sciControls.add(sciControlsItem);
    return this;
  }

   /**
   * Get sciControls
   * @return sciControls
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SCI_CONTROLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SciControlsEnum> getSciControls() {
    return sciControls;
  }


  @JsonProperty(JSON_PROPERTY_SCI_CONTROLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSciControls(List<SciControlsEnum> sciControls) {
    this.sciControls = sciControls;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.country, user.country) &&
        Objects.equals(this.accms, user.accms) &&
        Objects.equals(this.classifications, user.classifications) &&
        Objects.equals(this.sciControls, user.sciControls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, accms, classifications, sciControls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    accms: ").append(toIndentedString(accms)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    sciControls: ").append(toIndentedString(sciControls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

