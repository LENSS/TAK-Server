package tak.server.federation.message;


import java.io.Serializable;
import java.net.URI;

/**
 * A Roger Connection typically represents a connection between ROGER and some endpoint/addressable entity/peer.
 * If the protocol is connectionless, then it still represents the two endpoints of communication.
 * This class is used as the source field in ROGER messages, but it can also serve other purposes.
 * A default value is provided in cases where the message is generated
 */
public class FederationConnection implements Serializable {
    /**
     * Generated by eclipse
     */
    private static final long serialVersionUID = 2318148029171689045L;

    // ** Information identifying the ROGER side of the connection/exchange.
    private final AddressableEntity<?> rogerId;

    // ** Information identifying the peer side of the connection/exchange.
    private final AddressableEntity<?> peerId;

    private static final FederationConnection EMPTY_MARKER = new FederationConnection();

    /**
     * This method returns a marker used to indicate the absence of an external message source.
     * Prefer this marker to null, because in situations where a network communication plugin
     * is making a new message, leaving out the source field is generally a mistake. If you would
     * like to distinguish between this mistake and other situations in which there is intentionally
     * no source, then the marker becomes necessary.
     * @return the empty marker instance.
     */
    public static FederationConnection getEmptyMarker() {
        return EMPTY_MARKER;
    }

    private FederationConnection() {
        rogerId = null;
        peerId = null;
    }

    public FederationConnection(FederationConnection connection) {
        this.rogerId = connection.getRogerId();
        this.peerId = connection.getPeerId();
    }

    public FederationConnection(AddressableEntity rogerId, AddressableEntity peerId) {
        this.rogerId = rogerId;
        this.peerId = peerId;
    }

    public FederationConnection(URI rogerUri, URI peerUri) {
        this.rogerId = new AddressableEntity<URI>(rogerUri);
        this.peerId = new AddressableEntity<URI>(peerUri);
    }

    public AddressableEntity getRogerId() {
        return this.rogerId;
    }

    public AddressableEntity getPeerId() {
        return this.peerId;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (!obj.getClass().equals(this.getClass())) {
            return false;
        }
        FederationConnection rogerConnection = (FederationConnection) obj;
        return this.rogerId.equals(rogerConnection.getRogerId()) && this.peerId.equals(rogerConnection.getPeerId());
    }

    @Override
    public int hashCode() {
        // ** Three properties of a decent hash code:
        // 1) Returns same result every time it's called on the same object.
        // 2) Identical objects have identical hash codes.
        // 3) Different objects do not have the same hash code.
        return this.rogerId.hashCode() + this.peerId.hashCode();
    }

    @Override
    public String toString() {
        String rogerIdString = (rogerId == null) ? "null" : rogerId.toString();
        String peerIdString = (peerId == null) ? "null" : peerId.toString();
        return "(Roger ID: '" + rogerIdString + "', Peer ID: '" + peerIdString + "')";
    }
}